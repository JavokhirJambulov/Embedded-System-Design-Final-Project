
new_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004808  08004808  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004810  08004810  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000074  0800488c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800488c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2ab  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d9  00000000  00000000  0002b34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026510  00000000  00000000  0002dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b21c  00000000  00000000  000544b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8df7  00000000  00000000  0005f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001484c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc0  00000000  00000000  00148514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046cc 	.word	0x080046cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080046cc 	.word	0x080046cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fce0 	bl	8000f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f87f 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8f3 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8c1 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	4833      	ldr	r0, [pc, #204]	; (8000660 <main+0xec>)
 8000592:	f001 f841 	bl	8001618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059c:	4830      	ldr	r0, [pc, #192]	; (8000660 <main+0xec>)
 800059e:	f001 f83b 	bl	8001618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	482d      	ldr	r0, [pc, #180]	; (8000660 <main+0xec>)
 80005aa:	f001 f835 	bl	8001618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b4:	482a      	ldr	r0, [pc, #168]	; (8000660 <main+0xec>)
 80005b6:	f001 f82f 	bl	8001618 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  int keyA = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
	  	  	printf("Input key");
 80005be:	4829      	ldr	r0, [pc, #164]	; (8000664 <main+0xf0>)
 80005c0:	f003 f8f6 	bl	80037b0 <iprintf>
	  	  	while(keyPressed == 0){
 80005c4:	e003      	b.n	80005ce <main+0x5a>
	  	  		HAL_Delay(500);
 80005c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ca:	f000 fd2d 	bl	8001028 <HAL_Delay>
	  	  	while(keyPressed == 0){
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <main+0xf4>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f7      	beq.n	80005c6 <main+0x52>
	  	  	}
	  	  	keyA = keyPressed;
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <main+0xf4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	603b      	str	r3, [r7, #0]
	  	  	if(keyA == 65){
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	2b41      	cmp	r3, #65	; 0x41
 80005e0:	d1eb      	bne.n	80005ba <main+0x46>
	  	  		keyA = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
	  	  		keyPressed = 0;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <main+0xf4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	  	  		printf("\nPass true: ");
 80005ec:	481f      	ldr	r0, [pc, #124]	; (800066c <main+0xf8>)
 80005ee:	f003 f8df 	bl	80037b0 <iprintf>
	  	  	    for(int i = 0;i<4;i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	e022      	b.n	800063e <main+0xca>
	  	  		  	printf("\nInput the password: ");
 80005f8:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0xfc>)
 80005fa:	f003 f8d9 	bl	80037b0 <iprintf>
	  	  		  	while(keyPressed == 0){
 80005fe:	e003      	b.n	8000608 <main+0x94>
	  	  		  		HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fd10 	bl	8001028 <HAL_Delay>
	  	  		  	while(keyPressed == 0){
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <main+0xf4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f7      	beq.n	8000600 <main+0x8c>

	  	  			  	  	}
	  	  		  	passw = keyPressed;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <main+0xf4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <main+0x100>)
 8000618:	601a      	str	r2, [r3, #0]
	  	  			if(password[i] == passw){
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <main+0x104>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000622:	461a      	mov	r2, r3
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <main+0x100>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d002      	beq.n	8000632 <main+0xbe>
	  	  				pass;
	  	  			}
	  	  			else{
	  	  				pass = 0;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0x108>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
	  	  			}
	  	  			keyPressed=0;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0xf4>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	  	  	    for(int i = 0;i<4;i++){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b03      	cmp	r3, #3
 8000642:	ddd9      	ble.n	80005f8 <main+0x84>
	  	  		}
	  	  		if(pass==1){
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <main+0x108>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d1b6      	bne.n	80005ba <main+0x46>
	  	  			printf("\nPass true: ");
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <main+0xf8>)
 800064e:	f003 f8af 	bl	80037b0 <iprintf>
	  	  			break;
 8000652:	bf00      	nop
 8000654:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	48001000 	.word	0x48001000
 8000664:	080046e4 	.word	0x080046e4
 8000668:	20000130 	.word	0x20000130
 800066c:	080046f0 	.word	0x080046f0
 8000670:	08004700 	.word	0x08004700
 8000674:	20000134 	.word	0x20000134
 8000678:	08004718 	.word	0x08004718
 800067c:	20000000 	.word	0x20000000

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	; 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	; 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f886 	bl	80037a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f000 fff5 	bl	8001694 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b0:	f000 fa98 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b4:	2310      	movs	r3, #16
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f837 	bl	8001740 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006d8:	f000 fa84 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fbff 	bl	8001ef8 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000700:	f000 fa70 	bl	8000be4 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	; 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART2_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000750:	f002 fab2 	bl	8002cb8 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 fa43 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000090 	.word	0x20000090
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <MX_GPIO_Init+0xec>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a34      	ldr	r2, [pc, #208]	; (8000858 <MX_GPIO_Init+0xec>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <MX_GPIO_Init+0xec>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_GPIO_Init+0xec>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <MX_GPIO_Init+0xec>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <MX_GPIO_Init+0xec>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_GPIO_Init+0xec>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_GPIO_Init+0xec>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0xec>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007d0:	4822      	ldr	r0, [pc, #136]	; (800085c <MX_GPIO_Init+0xf0>)
 80007d2:	f000 ff21 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fd51 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_GPIO_Init+0xf0>)
 800080c:	f000 fd42 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2006      	movs	r0, #6
 8000816:	f000 fd06 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800081a:	2006      	movs	r0, #6
 800081c:	f000 fd1f 	bl	800125e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2007      	movs	r0, #7
 8000826:	f000 fcfe 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800082a:	2007      	movs	r0, #7
 800082c:	f000 fd17 	bl	800125e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2008      	movs	r0, #8
 8000836:	f000 fcf6 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800083a:	2008      	movs	r0, #8
 800083c:	f000 fd0f 	bl	800125e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2009      	movs	r0, #9
 8000846:	f000 fcee 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800084a:	2009      	movs	r0, #9
 800084c:	f000 fd07 	bl	800125e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48001000 	.word	0x48001000

08000860 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000868:	1d39      	adds	r1, r7, #4
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	2201      	movs	r2, #1
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <__io_putchar+0x20>)
 8000872:	f002 fa6f 	bl	8002d54 <HAL_UART_Transmit>

  return ch;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000090 	.word	0x20000090

08000884 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 800088e:	f000 fbbf 	bl	8001010 <HAL_GetTick>
 8000892:	4603      	mov	r3, r0
 8000894:	4aac      	ldr	r2, [pc, #688]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000896:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000898:	4bab      	ldr	r3, [pc, #684]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4bab      	ldr	r3, [pc, #684]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b0a      	cmp	r3, #10
 80008a4:	f240 8190 	bls.w	8000bc8 <HAL_GPIO_EXTI_Callback+0x344>
    /*Configure GPIO pins : PA0 PA1 PA2 PA3 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008a8:	4ba9      	ldr	r3, [pc, #676]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80008aa:	220f      	movs	r2, #15
 80008ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80008ae:	4ba8      	ldr	r3, [pc, #672]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80008b4:	4ba6      	ldr	r3, [pc, #664]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	4ba5      	ldr	r3, [pc, #660]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80008c0:	49a3      	ldr	r1, [pc, #652]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f000 fce5 	bl	8001294 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d0:	48a0      	ldr	r0, [pc, #640]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80008d2:	f000 fea1 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008dc:	489d      	ldr	r0, [pc, #628]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80008de:	f000 fe9b 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e8:	489a      	ldr	r0, [pc, #616]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80008ea:	f000 fe95 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	4897      	ldr	r0, [pc, #604]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80008f6:	f000 fe8f 	bl	8001618 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d10b      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x94>
 8000900:	2101      	movs	r1, #1
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fe6f 	bl	80015e8 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_EXTI_Callback+0x94>
    {
      keyPressed = 65; //ASCII value of A
 8000910:	4b91      	ldr	r3, [pc, #580]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000912:	2241      	movs	r2, #65	; 0x41
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e02b      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0xec>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d10b      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0xb2>
 800091e:	2102      	movs	r1, #2
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f000 fe60 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_EXTI_Callback+0xb2>
    {
      keyPressed = 51; //ASCII value of 3
 800092e:	4b8a      	ldr	r3, [pc, #552]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000930:	2233      	movs	r2, #51	; 0x33
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e01c      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0xec>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d10b      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0xd0>
 800093c:	2104      	movs	r1, #4
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f000 fe51 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_EXTI_Callback+0xd0>
    {
      keyPressed = 50; //ASCII value of 2
 800094c:	4b82      	ldr	r3, [pc, #520]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800094e:	2232      	movs	r2, #50	; 0x32
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e00d      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0xec>
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	2b08      	cmp	r3, #8
 8000958:	d10a      	bne.n	8000970 <HAL_GPIO_EXTI_Callback+0xec>
 800095a:	2108      	movs	r1, #8
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 fe42 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <HAL_GPIO_EXTI_Callback+0xec>
    {
      keyPressed = 49; //ASCII value of 1
 800096a:	4b7b      	ldr	r3, [pc, #492]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800096c:	2231      	movs	r2, #49	; 0x31
 800096e:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000976:	4877      	ldr	r0, [pc, #476]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000978:	f000 fe4e 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	4874      	ldr	r0, [pc, #464]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000984:	f000 fe48 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	4871      	ldr	r0, [pc, #452]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000990:	f000 fe42 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	486e      	ldr	r0, [pc, #440]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800099c:	f000 fe3c 	bl	8001618 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d10b      	bne.n	80009be <HAL_GPIO_EXTI_Callback+0x13a>
 80009a6:	2101      	movs	r1, #1
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 fe1c 	bl	80015e8 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <HAL_GPIO_EXTI_Callback+0x13a>
    {
      keyPressed = 66; //ASCII value of B
 80009b6:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80009b8:	2242      	movs	r2, #66	; 0x42
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e02b      	b.n	8000a16 <HAL_GPIO_EXTI_Callback+0x192>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d10b      	bne.n	80009dc <HAL_GPIO_EXTI_Callback+0x158>
 80009c4:	2102      	movs	r1, #2
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f000 fe0d 	bl	80015e8 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_EXTI_Callback+0x158>
    {
      keyPressed = 54; //ASCII value of 6
 80009d4:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80009d6:	2236      	movs	r2, #54	; 0x36
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e01c      	b.n	8000a16 <HAL_GPIO_EXTI_Callback+0x192>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d10b      	bne.n	80009fa <HAL_GPIO_EXTI_Callback+0x176>
 80009e2:	2104      	movs	r1, #4
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fdfe 	bl	80015e8 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_GPIO_EXTI_Callback+0x176>
    {
      keyPressed = 53; //ASCII value of 5
 80009f2:	4b59      	ldr	r3, [pc, #356]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80009f4:	2235      	movs	r2, #53	; 0x35
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e00d      	b.n	8000a16 <HAL_GPIO_EXTI_Callback+0x192>
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	d10a      	bne.n	8000a16 <HAL_GPIO_EXTI_Callback+0x192>
 8000a00:	2108      	movs	r1, #8
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fdef 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <HAL_GPIO_EXTI_Callback+0x192>
    {
      keyPressed = 52; //ASCII value of 4
 8000a10:	4b51      	ldr	r3, [pc, #324]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a12:	2234      	movs	r2, #52	; 0x34
 8000a14:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	484d      	ldr	r0, [pc, #308]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a1e:	f000 fdfb 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	484a      	ldr	r0, [pc, #296]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a2a:	f000 fdf5 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a34:	4847      	ldr	r0, [pc, #284]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a36:	f000 fdef 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a40:	4844      	ldr	r0, [pc, #272]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a42:	f000 fde9 	bl	8001618 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10b      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x1e0>
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fdc9 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_EXTI_Callback+0x1e0>
    {
      keyPressed = 67; //ASCII value of C
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a5e:	2243      	movs	r2, #67	; 0x43
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e02b      	b.n	8000abc <HAL_GPIO_EXTI_Callback+0x238>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10b      	bne.n	8000a82 <HAL_GPIO_EXTI_Callback+0x1fe>
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fdba 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_EXTI_Callback+0x1fe>
    {
      keyPressed = 57; //ASCII value of 9
 8000a7a:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a7c:	2239      	movs	r2, #57	; 0x39
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e01c      	b.n	8000abc <HAL_GPIO_EXTI_Callback+0x238>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d10b      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x21c>
 8000a88:	2104      	movs	r1, #4
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fdab 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x21c>
    {
      keyPressed = 56; //ASCII value of 8
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a9a:	2238      	movs	r2, #56	; 0x38
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e00d      	b.n	8000abc <HAL_GPIO_EXTI_Callback+0x238>
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	2b08      	cmp	r3, #8
 8000aa4:	d10a      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x238>
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 fd9c 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <HAL_GPIO_EXTI_Callback+0x238>
    {
      keyPressed = 55; //ASCII value of 7
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ab8:	2237      	movs	r2, #55	; 0x37
 8000aba:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac2:	4824      	ldr	r0, [pc, #144]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000ac4:	f000 fda8 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	4821      	ldr	r0, [pc, #132]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000ad0:	f000 fda2 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ada:	481e      	ldr	r0, [pc, #120]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000adc:	f000 fd9c 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae6:	481b      	ldr	r0, [pc, #108]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000ae8:	f000 fd96 	bl	8001618 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10b      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x286>
 8000af2:	2101      	movs	r1, #1
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fd76 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_EXTI_Callback+0x286>
    {
      keyPressed = 68; //ASCII value of D
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b04:	2244      	movs	r2, #68	; 0x44
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e036      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2f4>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d10b      	bne.n	8000b28 <HAL_GPIO_EXTI_Callback+0x2a4>
 8000b10:	2102      	movs	r1, #2
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f000 fd67 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_EXTI_Callback+0x2a4>
    {
      keyPressed = 35; //ASCII value of #
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b22:	2223      	movs	r2, #35	; 0x23
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e027      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2f4>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d116      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x2d8>
 8000b2e:	2104      	movs	r1, #4
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fd58 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00e      	beq.n	8000b5c <HAL_GPIO_EXTI_Callback+0x2d8>
    {
      keyPressed = 48; //ASCII value of 0
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b40:	2230      	movs	r2, #48	; 0x30
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e018      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2f4>
 8000b46:	bf00      	nop
 8000b48:	2000012c 	.word	0x2000012c
 8000b4c:	20000128 	.word	0x20000128
 8000b50:	20000114 	.word	0x20000114
 8000b54:	48001000 	.word	0x48001000
 8000b58:	20000130 	.word	0x20000130
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d10a      	bne.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2f4>
 8000b62:	2108      	movs	r1, #8
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fd3e 	bl	80015e8 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2f4>
    {
      keyPressed = 42; //ASCII value of *
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x34c>)
 8000b74:	222a      	movs	r2, #42	; 0x2a
 8000b76:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x350>)
 8000b80:	f000 fd4a 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x350>)
 8000b8c:	f000 fd44 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x350>)
 8000b98:	f000 fd3e 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x350>)
 8000ba4:	f000 fd38 	bl	8001618 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x354>)
 8000baa:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x354>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x354>)
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 fb6a 	bl	8001294 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x358>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000bc6:	6013      	str	r3, [r2, #0]
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000130 	.word	0x20000130
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	20000114 	.word	0x20000114
 8000bdc:	2000012c 	.word	0x2000012c
 8000be0:	20000128 	.word	0x20000128

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ac      	sub	sp, #176	; 0xb0
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2288      	movs	r2, #136	; 0x88
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fda1 	bl	80037a0 <memset>
  if(huart->Instance==USART2)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_UART_MspInit+0xb0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d13a      	bne.n	8000cde <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fb63 	bl	8002340 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c80:	f7ff ffb0 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_UART_MspInit+0xb4>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cb4:	2360      	movs	r3, #96	; 0x60
 8000cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0xb8>)
 8000cda:	f000 fadb 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	37b0      	adds	r7, #176	; 0xb0
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000c00 	.word	0x48000c00

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f952 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 fc7b 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f000 fc74 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f000 fc6d 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d76:	2008      	movs	r0, #8
 8000d78:	f000 fc66 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e00a      	b.n	8000da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d92:	f3af 8000 	nop.w
 8000d96:	4601      	mov	r1, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf0      	blt.n	8000d92 <_read+0x12>
  }

  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e009      	b.n	8000de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd43 	bl	8000860 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf1      	blt.n	8000dcc <_write+0x12>
  }
  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_close>:

int _close(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f002 fc5e 	bl	800374c <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20018000 	.word	0x20018000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000138 	.word	0x20000138
 8000ec4:	20000150 	.word	0x20000150

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef0:	f7ff ffea 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f002 fc1d 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1e:	f7ff fb29 	bl	8000574 <main>

08000f22 <LoopForever>:

LoopForever:
    b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f30:	08004818 	.word	0x08004818
  ldr r2, =_sbss
 8000f34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f38:	20000150 	.word	0x20000150

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>

08000f3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f961 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4e:	200f      	movs	r0, #15
 8000f50:	f000 f80e 	bl	8000f70 <HAL_InitTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	e001      	b.n	8000f64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f60:	f7ff fe46 	bl	8000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x70>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f96d 	bl	800127a <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d809      	bhi.n	8000fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f937 	bl	8001226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e001      	b.n	8000fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c
 800100c:	2000013c 	.word	0x2000013c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000013c 	.word	0x2000013c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff29 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff3e 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff31 	bl	80010d4 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e17f      	b.n	80015a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8171 	beq.w	800159e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d005      	beq.n	80012d4 <HAL_GPIO_Init+0x40>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b03      	cmp	r3, #3
 8001340:	d118      	bne.n	8001374 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80ac 	beq.w	800159e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a5e      	ldr	r2, [pc, #376]	; (80015c4 <HAL_GPIO_Init+0x330>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145e:	4a5a      	ldr	r2, [pc, #360]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001488:	d025      	beq.n	80014d6 <HAL_GPIO_Init+0x242>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x338>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x33c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x340>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x344>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x348>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <HAL_GPIO_Init+0x34c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x22a>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x244>
 80014d6:	2300      	movs	r3, #0
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e8:	4937      	ldr	r1, [pc, #220]	; (80015c8 <HAL_GPIO_Init+0x334>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_GPIO_Init+0x350>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800151a:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <HAL_GPIO_Init+0x350>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_GPIO_Init+0x350>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_GPIO_Init+0x350>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_GPIO_Init+0x350>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f47f ae78 	bne.w	80012a4 <HAL_GPIO_Init+0x10>
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	48000800 	.word	0x48000800
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48001000 	.word	0x48001000
 80015dc:	48001400 	.word	0x48001400
 80015e0:	48001800 	.word	0x48001800
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001634:	e002      	b.n	800163c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f90c 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_PWREx_GetVoltageRange+0x18>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40007000 	.word	0x40007000

08001694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a2:	d130      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b0:	d038      	beq.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2232      	movs	r2, #50	; 0x32
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d8:	e002      	b.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ec:	d102      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f2      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001700:	d110      	bne.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e00f      	b.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001712:	d007      	beq.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001722:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40007000 	.word	0x40007000
 8001738:	20000004 	.word	0x20000004
 800173c:	431bde83 	.word	0x431bde83

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e3ca      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001752:	4b97      	ldr	r3, [pc, #604]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175c:	4b94      	ldr	r3, [pc, #592]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80e4 	beq.w	800193c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_RCC_OscConfig+0x4a>
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	f040 808b 	bne.w	8001898 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b01      	cmp	r3, #1
 8001786:	f040 8087 	bne.w	8001898 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x62>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e3a2      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_RCC_OscConfig+0x7c>
 80017b2:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ba:	e005      	b.n	80017c8 <HAL_RCC_OscConfig+0x88>
 80017bc:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d223      	bcs.n	8001814 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fd55 	bl	8002280 <RCC_SetFlashLatencyFromMSIRange>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e383      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a72      	ldr	r2, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	496d      	ldr	r1, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fe:	4b6c      	ldr	r3, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	4968      	ldr	r1, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
 8001812:	e025      	b.n	8001860 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001814:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4960      	ldr	r1, [pc, #384]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	495b      	ldr	r1, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fd15 	bl	8002280 <RCC_SetFlashLatencyFromMSIRange>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e343      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001860:	f000 fc4a 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	4950      	ldr	r1, [pc, #320]	; (80019b4 <HAL_RCC_OscConfig+0x274>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <HAL_RCC_OscConfig+0x278>)
 800187e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001880:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fb73 	bl	8000f70 <HAL_InitTick>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d052      	beq.n	800193a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	e327      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d032      	beq.n	8001906 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a42      	ldr	r2, [pc, #264]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbb0 	bl	8001010 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbac 	bl	8001010 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e310      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4931      	ldr	r1, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	492c      	ldr	r1, [pc, #176]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
 8001904:	e01a      	b.n	800193c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001912:	f7ff fb7d 	bl	8001010 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191a:	f7ff fb79 	bl	8001010 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e2dd      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0x1da>
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800193a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d074      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b08      	cmp	r3, #8
 800194c:	d005      	beq.n	800195a <HAL_RCC_OscConfig+0x21a>
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b0c      	cmp	r3, #12
 8001952:	d10e      	bne.n	8001972 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d064      	beq.n	8001a30 <HAL_RCC_OscConfig+0x2f0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d160      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e2ba      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x24a>
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e026      	b.n	80019d8 <HAL_RCC_OscConfig+0x298>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001992:	d115      	bne.n	80019c0 <HAL_RCC_OscConfig+0x280>
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 800199a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a02      	ldr	r2, [pc, #8]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e014      	b.n	80019d8 <HAL_RCC_OscConfig+0x298>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08004728 	.word	0x08004728
 80019b8:	20000004 	.word	0x20000004
 80019bc:	20000008 	.word	0x20000008
 80019c0:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a9f      	ldr	r2, [pc, #636]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b9d      	ldr	r3, [pc, #628]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a9c      	ldr	r2, [pc, #624]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb16 	bl	8001010 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fb12 	bl	8001010 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e276      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fa:	4b92      	ldr	r3, [pc, #584]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2a8>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fb02 	bl	8001010 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fafe 	bl	8001010 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e262      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a22:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2d0>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d060      	beq.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x310>
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d119      	bne.n	8001a7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d116      	bne.n	8001a7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a50:	4b7c      	ldr	r3, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_OscConfig+0x328>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e23f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	4973      	ldr	r1, [pc, #460]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a7c:	e040      	b.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d023      	beq.n	8001ace <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff fabd 	bl	8001010 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fab9 	bl	8001010 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e21d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aac:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b62      	ldr	r3, [pc, #392]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	495f      	ldr	r1, [pc, #380]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e018      	b.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fa99 	bl	8001010 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fa95 	bl	8001010 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1f9      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff fa74 	bl	8001010 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa70 	bl	8001010 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1d4      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ef      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3ec>
 8001b4c:	e01b      	b.n	8001b86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fa57 	bl	8001010 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff fa53 	bl	8001010 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1b7      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ef      	bne.n	8001b66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80a6 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	4a26      	ldr	r2, [pc, #152]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_RCC_OscConfig+0x508>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d118      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_OscConfig+0x508>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_RCC_OscConfig+0x508>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fa1a 	bl	8001010 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be0:	f7ff fa16 	bl	8001010 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e17a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCC_OscConfig+0x508>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4d8>
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c16:	e029      	b.n	8001c6c <HAL_RCC_OscConfig+0x52c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_OscConfig+0x50c>
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c40:	e014      	b.n	8001c6c <HAL_RCC_OscConfig+0x52c>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	4b9c      	ldr	r3, [pc, #624]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	4a9b      	ldr	r2, [pc, #620]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5c:	4b98      	ldr	r3, [pc, #608]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a97      	ldr	r2, [pc, #604]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d016      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff f9cc 	bl	8001010 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f9c8 	bl	8001010 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e12a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c92:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0ed      	beq.n	8001c7c <HAL_RCC_OscConfig+0x53c>
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f9b5 	bl	8001010 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff f9b1 	bl	8001010 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e113      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc0:	4b7f      	ldr	r3, [pc, #508]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ed      	bne.n	8001caa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	4a79      	ldr	r2, [pc, #484]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80fe 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	f040 80d0 	bne.w	8001e94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cf4:	4b72      	ldr	r3, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d130      	bne.n	8001d6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	3b01      	subs	r3, #1
 8001d14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d127      	bne.n	8001d6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d11f      	bne.n	8001d6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d34:	2a07      	cmp	r2, #7
 8001d36:	bf14      	ite	ne
 8001d38:	2201      	movne	r2, #1
 8001d3a:	2200      	moveq	r2, #0
 8001d3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d113      	bne.n	8001d6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d109      	bne.n	8001d6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d06e      	beq.n	8001e48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d069      	beq.n	8001e44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0ad      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d98:	f7ff f93a 	bl	8001010 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f936 	bl	8001010 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e09a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db2:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbe:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x784>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd8:	0212      	lsls	r2, r2, #8
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de0:	0852      	lsrs	r2, r2, #1
 8001de2:	3a01      	subs	r2, #1
 8001de4:	0552      	lsls	r2, r2, #21
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dec:	0852      	lsrs	r2, r2, #1
 8001dee:	3a01      	subs	r2, #1
 8001df0:	0652      	lsls	r2, r2, #25
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df8:	0912      	lsrs	r2, r2, #4
 8001dfa:	0452      	lsls	r2, r2, #17
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	4930      	ldr	r1, [pc, #192]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e1c:	f7ff f8f8 	bl	8001010 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff f8f4 	bl	8001010 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e058      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e42:	e050      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e04f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d148      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e6c:	f7ff f8d0 	bl	8001010 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8cc 	bl	8001010 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e030      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x734>
 8001e92:	e028      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d023      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_RCC_OscConfig+0x780>)
 8001ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f8b3 	bl	8001010 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eac:	e00c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff f8af 	bl	8001010 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d905      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e013      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_OscConfig+0x7b0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ec      	bne.n	8001eae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x7b0>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4905      	ldr	r1, [pc, #20]	; (8001ef0 <HAL_RCC_OscConfig+0x7b0>)
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x7b4>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
 8001ee0:	e001      	b.n	8001ee6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	feeefffc 	.word	0xfeeefffc

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0e7      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4970      	ldr	r1, [pc, #448]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b6e      	ldr	r3, [pc, #440]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0cf      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d908      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4960      	ldr	r1, [pc, #384]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d04c      	beq.n	8002010 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d121      	bne.n	8001fce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0a6      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f96:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d115      	bne.n	8001fce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e09a      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08e      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e086      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fce:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 0203 	bic.w	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4943      	ldr	r1, [pc, #268]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe0:	f7ff f816 	bl	8001010 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f7ff f812 	bl	8001010 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e06e      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1eb      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002028:	429a      	cmp	r2, r3
 800202a:	d208      	bcs.n	800203e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	492b      	ldr	r1, [pc, #172]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d210      	bcs.n	800206e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 0207 	bic.w	r2, r3, #7
 8002054:	4923      	ldr	r1, [pc, #140]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_ClockConfig+0x1ec>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e036      	b.n	80020dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4918      	ldr	r1, [pc, #96]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4910      	ldr	r1, [pc, #64]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ac:	f000 f824 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	490b      	ldr	r1, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1f4>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1f8>)
 80020ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1fc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff4d 	bl	8000f70 <HAL_InitTick>
 80020d6:	4603      	mov	r3, r0
 80020d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020da:	7afb      	ldrb	r3, [r7, #11]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08004728 	.word	0x08004728
 80020f0:	20000004 	.word	0x20000004
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d121      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11e      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002138:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e005      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10d      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d102      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_RCC_GetSysClockFreq+0x110>)
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	e004      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d101      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <HAL_RCC_GetSysClockFreq+0x114>)
 800217e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d134      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0xa6>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d003      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0xac>
 800219c:	e005      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_GetSysClockFreq+0x110>)
 80021a0:	617b      	str	r3, [r7, #20]
      break;
 80021a2:	e005      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_RCC_GetSysClockFreq+0x114>)
 80021a6:	617b      	str	r3, [r7, #20]
      break;
 80021a8:	e002      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	617b      	str	r3, [r7, #20]
      break;
 80021ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	3301      	adds	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	fb03 f202 	mul.w	r2, r3, r2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	0e5b      	lsrs	r3, r3, #25
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	3301      	adds	r3, #1
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f0:	69bb      	ldr	r3, [r7, #24]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	08004740 	.word	0x08004740
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200

08002210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCC_GetHCLKFreq+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800222c:	f7ff fff0 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08004738 	.word	0x08004738

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002258:	f7ff ffda 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	0adb      	lsrs	r3, r3, #11
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4904      	ldr	r1, [pc, #16]	; (800227c <HAL_RCC_GetPCLK2Freq+0x28>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	08004738 	.word	0x08004738

08002280 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002298:	f7ff f9ee 	bl	8001678 <HAL_PWREx_GetVoltageRange>
 800229c:	6178      	str	r0, [r7, #20]
 800229e:	e014      	b.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6593      	str	r3, [r2, #88]	; 0x58
 80022ac:	4b22      	ldr	r3, [pc, #136]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022b8:	f7ff f9de 	bl	8001678 <HAL_PWREx_GetVoltageRange>
 80022bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d0:	d10b      	bne.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d919      	bls.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2ba0      	cmp	r3, #160	; 0xa0
 80022dc:	d902      	bls.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022de:	2302      	movs	r3, #2
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e013      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e4:	2301      	movs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	e010      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d902      	bls.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022f0:	2303      	movs	r3, #3
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e00a      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d102      	bne.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	e004      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b70      	cmp	r3, #112	; 0x70
 8002306:	d101      	bne.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002308:	2301      	movs	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 0207 	bic.w	r2, r3, #7
 8002314:	4909      	ldr	r1, [pc, #36]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	40022000 	.word	0x40022000

08002340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002348:	2300      	movs	r3, #0
 800234a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800234c:	2300      	movs	r3, #0
 800234e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002358:	2b00      	cmp	r3, #0
 800235a:	d041      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002360:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002364:	d02a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002366:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800236a:	d824      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800236c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002370:	d008      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002376:	d81e      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800237c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002380:	d010      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002382:	e018      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002384:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a85      	ldr	r2, [pc, #532]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002390:	e015      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fabb 	bl	8002914 <RCCEx_PLLSAI1_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a2:	e00c      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3320      	adds	r3, #32
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fba6 	bl	8002afc <RCCEx_PLLSAI2_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b4:	e003      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ba:	e000      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023c4:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d2:	4973      	ldr	r1, [pc, #460]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023da:	e001      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d041      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f4:	d02a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023fa:	d824      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002406:	d81e      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d010      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002412:	e018      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002414:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a61      	ldr	r2, [pc, #388]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002420:	e015      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fa73 	bl	8002914 <RCCEx_PLLSAI1_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002432:	e00c      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3320      	adds	r3, #32
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fb5e 	bl	8002afc <RCCEx_PLLSAI2_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002444:	e003      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	74fb      	strb	r3, [r7, #19]
      break;
 800244a:	e000      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800244c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10b      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002454:	4b52      	ldr	r3, [pc, #328]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002462:	494f      	ldr	r1, [pc, #316]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800246a:	e001      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a0 	beq.w	80025be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6593      	str	r3, [r2, #88]	; 0x58
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fda6 	bl	8001010 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024c6:	e009      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe fda2 	bl	8001010 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d902      	bls.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	74fb      	strb	r3, [r7, #19]
        break;
 80024da:	e005      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d15c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01f      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	d019      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002516:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fd61 	bl	8001010 <HAL_GetTick>
 800254e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002550:	e00b      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe fd5d 	bl	8001010 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d902      	bls.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	74fb      	strb	r3, [r7, #19]
            break;
 8002568:	e006      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ec      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258e:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002596:	e009      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
 800259c:	e006      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ac:	7c7b      	ldrb	r3, [r7, #17]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b9e      	ldr	r3, [pc, #632]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a9d      	ldr	r2, [pc, #628]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ca:	4b98      	ldr	r3, [pc, #608]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f023 0203 	bic.w	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	4994      	ldr	r1, [pc, #592]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 020c 	bic.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	498c      	ldr	r1, [pc, #560]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800260e:	4b87      	ldr	r3, [pc, #540]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4983      	ldr	r1, [pc, #524]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002630:	4b7e      	ldr	r3, [pc, #504]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	497b      	ldr	r1, [pc, #492]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002652:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	4972      	ldr	r1, [pc, #456]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002674:	4b6d      	ldr	r3, [pc, #436]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	496a      	ldr	r1, [pc, #424]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	4961      	ldr	r1, [pc, #388]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b8:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c6:	4959      	ldr	r1, [pc, #356]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026da:	4b54      	ldr	r3, [pc, #336]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e8:	4950      	ldr	r1, [pc, #320]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	4948      	ldr	r1, [pc, #288]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	493f      	ldr	r1, [pc, #252]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d028      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	4937      	ldr	r1, [pc, #220]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275e:	d106      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
 800276c:	e011      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002776:	d10c      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f8c8 	bl	8002914 <RCCEx_PLLSAI1_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d028      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	491f      	ldr	r1, [pc, #124]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027bc:	d106      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c8:	60d3      	str	r3, [r2, #12]
 80027ca:	e011      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2101      	movs	r1, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f899 	bl	8002914 <RCCEx_PLLSAI1_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02b      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280a:	4908      	ldr	r1, [pc, #32]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281a:	d109      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a02      	ldr	r2, [pc, #8]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002826:	60d3      	str	r3, [r2, #12]
 8002828:	e014      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002838:	d10c      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f867 	bl	8002914 <RCCEx_PLLSAI1_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286e:	4928      	ldr	r1, [pc, #160]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800287e:	d10d      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f844 	bl	8002914 <RCCEx_PLLSAI1_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d014      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	74bb      	strb	r3, [r7, #18]
 800289a:	e011      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3320      	adds	r3, #32
 80028aa:	2102      	movs	r1, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f925 	bl	8002afc <RCCEx_PLLSAI2_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	490d      	ldr	r1, [pc, #52]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002906:	7cbb      	ldrb	r3, [r7, #18]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002922:	4b75      	ldr	r3, [pc, #468]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800292e:	4b72      	ldr	r3, [pc, #456]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d10d      	bne.n	800295a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
       ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002946:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
       ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d047      	beq.n	80029ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e044      	b.n	80029ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d018      	beq.n	800299a <RCCEx_PLLSAI1_Config+0x86>
 8002968:	2b03      	cmp	r3, #3
 800296a:	d825      	bhi.n	80029b8 <RCCEx_PLLSAI1_Config+0xa4>
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x62>
 8002970:	2b02      	cmp	r3, #2
 8002972:	d009      	beq.n	8002988 <RCCEx_PLLSAI1_Config+0x74>
 8002974:	e020      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002976:	4b60      	ldr	r3, [pc, #384]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11d      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002986:	e01a      	b.n	80029be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002988:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d116      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002998:	e013      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029b6:	e006      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e004      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	430b      	orrs	r3, r1
 80029e4:	4944      	ldr	r1, [pc, #272]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d17d      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a40      	ldr	r2, [pc, #256]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe fb08 	bl	8001010 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a02:	e009      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a04:	f7fe fb04 	bl	8001010 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	73fb      	strb	r3, [r7, #15]
        break;
 8002a16:	e005      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ef      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d160      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d111      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	0211      	lsls	r1, r2, #8
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	0912      	lsrs	r2, r2, #4
 8002a48:	0452      	lsls	r2, r2, #17
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	492a      	ldr	r1, [pc, #168]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	610b      	str	r3, [r1, #16]
 8002a52:	e027      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d112      	bne.n	8002a80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6892      	ldr	r2, [r2, #8]
 8002a6a:	0211      	lsls	r1, r2, #8
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6912      	ldr	r2, [r2, #16]
 8002a70:	0852      	lsrs	r2, r2, #1
 8002a72:	3a01      	subs	r2, #1
 8002a74:	0552      	lsls	r2, r2, #21
 8002a76:	430a      	orrs	r2, r1
 8002a78:	491f      	ldr	r1, [pc, #124]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	610b      	str	r3, [r1, #16]
 8002a7e:	e011      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	0211      	lsls	r1, r2, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6952      	ldr	r2, [r2, #20]
 8002a96:	0852      	lsrs	r2, r2, #1
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	0652      	lsls	r2, r2, #25
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	4916      	ldr	r1, [pc, #88]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe faae 	bl	8001010 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab6:	e009      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab8:	f7fe faaa 	bl	8001010 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d902      	bls.n	8002acc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aca:	e005      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	4904      	ldr	r1, [pc, #16]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000

08002afc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b16:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d10d      	bne.n	8002b42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
       ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b2e:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d047      	beq.n	8002bd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e044      	b.n	8002bd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d018      	beq.n	8002b82 <RCCEx_PLLSAI2_Config+0x86>
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d825      	bhi.n	8002ba0 <RCCEx_PLLSAI2_Config+0xa4>
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d002      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x62>
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d009      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0x74>
 8002b5c:	e020      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5e:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11d      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e01a      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b70:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d116      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b80:	e013      	b.n	8002baa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b82:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b9e:	e006      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba4:	e004      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d167      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a35      	ldr	r2, [pc, #212]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe fa14 	bl	8001010 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bea:	e009      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bec:	f7fe fa10 	bl	8001010 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bfe:	e005      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ef      	bne.n	8002bec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d14a      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d111      	bne.n	8002c3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c18:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	0912      	lsrs	r2, r2, #4
 8002c30:	0452      	lsls	r2, r2, #17
 8002c32:	430a      	orrs	r2, r1
 8002c34:	491f      	ldr	r1, [pc, #124]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	614b      	str	r3, [r1, #20]
 8002c3a:	e011      	b.n	8002c60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6892      	ldr	r2, [r2, #8]
 8002c4c:	0211      	lsls	r1, r2, #8
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6912      	ldr	r2, [r2, #16]
 8002c52:	0852      	lsrs	r2, r2, #1
 8002c54:	3a01      	subs	r2, #1
 8002c56:	0652      	lsls	r2, r2, #25
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe f9d0 	bl	8001010 <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c72:	e009      	b.n	8002c88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c74:	f7fe f9cc 	bl	8001010 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d902      	bls.n	8002c88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	73fb      	strb	r3, [r7, #15]
          break;
 8002c86:	e005      	b.n	8002c94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ef      	beq.n	8002c74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e040      	b.n	8002d4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fd ffac 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8c0 	bl	8002e7c <UART_SetConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e022      	b.n	8002d4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fb6c 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fbf3 	bl	8003530 <UART_CheckIdleState>
 8002d4a:	4603      	mov	r3, r0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	f040 8082 	bne.w	8002e72 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_UART_Transmit+0x26>
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07a      	b.n	8002e74 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_UART_Transmit+0x38>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e073      	b.n	8002e74 <HAL_UART_Transmit+0x120>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2221      	movs	r2, #33	; 0x21
 8002da0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da2:	f7fe f935 	bl	8001010 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_UART_Transmit+0x80>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e003      	b.n	8002ddc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002de4:	e02d      	b.n	8002e42 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fbe6 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e039      	b.n	8002e74 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e12:	b292      	uxth	r2, r2
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3302      	adds	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e008      	b.n	8002e30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	b292      	uxth	r2, r2
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1cb      	bne.n	8002de6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fbb2 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e005      	b.n	8002e74 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e80:	b08a      	sub	sp, #40	; 0x28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4ba4      	ldr	r3, [pc, #656]	; (800313c <UART_SetConfig+0x2c0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a99      	ldr	r2, [pc, #612]	; (8003140 <UART_SetConfig+0x2c4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a90      	ldr	r2, [pc, #576]	; (8003144 <UART_SetConfig+0x2c8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d126      	bne.n	8002f54 <UART_SetConfig+0xd8>
 8002f06:	4b90      	ldr	r3, [pc, #576]	; (8003148 <UART_SetConfig+0x2cc>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d81b      	bhi.n	8002f4c <UART_SetConfig+0xd0>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <UART_SetConfig+0xa0>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f3d 	.word	0x08002f3d
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f32:	e116      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f34:	2302      	movs	r3, #2
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3a:	e112      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f42:	e10e      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f44:	2308      	movs	r3, #8
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e10a      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e106      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7c      	ldr	r2, [pc, #496]	; (800314c <UART_SetConfig+0x2d0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d138      	bne.n	8002fd0 <UART_SetConfig+0x154>
 8002f5e:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <UART_SetConfig+0x2cc>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d82d      	bhi.n	8002fc8 <UART_SetConfig+0x14c>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0xf8>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fc9 	.word	0x08002fc9
 8002f7c:	08002fc9 	.word	0x08002fc9
 8002f80:	08002fc9 	.word	0x08002fc9
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fc9 	.word	0x08002fc9
 8002f8c:	08002fc9 	.word	0x08002fc9
 8002f90:	08002fc9 	.word	0x08002fc9
 8002f94:	08002fb1 	.word	0x08002fb1
 8002f98:	08002fc9 	.word	0x08002fc9
 8002f9c:	08002fc9 	.word	0x08002fc9
 8002fa0:	08002fc9 	.word	0x08002fc9
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e0d8      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e0d4      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e0d0      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e0cc      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e0c8      	b.n	8003162 <UART_SetConfig+0x2e6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5e      	ldr	r2, [pc, #376]	; (8003150 <UART_SetConfig+0x2d4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d125      	bne.n	8003026 <UART_SetConfig+0x1aa>
 8002fda:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <UART_SetConfig+0x2cc>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fe4:	2b30      	cmp	r3, #48	; 0x30
 8002fe6:	d016      	beq.n	8003016 <UART_SetConfig+0x19a>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d818      	bhi.n	800301e <UART_SetConfig+0x1a2>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d00a      	beq.n	8003006 <UART_SetConfig+0x18a>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d814      	bhi.n	800301e <UART_SetConfig+0x1a2>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <UART_SetConfig+0x182>
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d008      	beq.n	800300e <UART_SetConfig+0x192>
 8002ffc:	e00f      	b.n	800301e <UART_SetConfig+0x1a2>
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003004:	e0ad      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003006:	2302      	movs	r3, #2
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300c:	e0a9      	b.n	8003162 <UART_SetConfig+0x2e6>
 800300e:	2304      	movs	r3, #4
 8003010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003014:	e0a5      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003016:	2308      	movs	r3, #8
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301c:	e0a1      	b.n	8003162 <UART_SetConfig+0x2e6>
 800301e:	2310      	movs	r3, #16
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003024:	e09d      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <UART_SetConfig+0x2d8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d125      	bne.n	800307c <UART_SetConfig+0x200>
 8003030:	4b45      	ldr	r3, [pc, #276]	; (8003148 <UART_SetConfig+0x2cc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800303a:	2bc0      	cmp	r3, #192	; 0xc0
 800303c:	d016      	beq.n	800306c <UART_SetConfig+0x1f0>
 800303e:	2bc0      	cmp	r3, #192	; 0xc0
 8003040:	d818      	bhi.n	8003074 <UART_SetConfig+0x1f8>
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d00a      	beq.n	800305c <UART_SetConfig+0x1e0>
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d814      	bhi.n	8003074 <UART_SetConfig+0x1f8>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <UART_SetConfig+0x1d8>
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d008      	beq.n	8003064 <UART_SetConfig+0x1e8>
 8003052:	e00f      	b.n	8003074 <UART_SetConfig+0x1f8>
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e082      	b.n	8003162 <UART_SetConfig+0x2e6>
 800305c:	2302      	movs	r3, #2
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e07e      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e07a      	b.n	8003162 <UART_SetConfig+0x2e6>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e076      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e072      	b.n	8003162 <UART_SetConfig+0x2e6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a35      	ldr	r2, [pc, #212]	; (8003158 <UART_SetConfig+0x2dc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d12a      	bne.n	80030dc <UART_SetConfig+0x260>
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <UART_SetConfig+0x2cc>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003094:	d01a      	beq.n	80030cc <UART_SetConfig+0x250>
 8003096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309a:	d81b      	bhi.n	80030d4 <UART_SetConfig+0x258>
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d00c      	beq.n	80030bc <UART_SetConfig+0x240>
 80030a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a6:	d815      	bhi.n	80030d4 <UART_SetConfig+0x258>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <UART_SetConfig+0x238>
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b0:	d008      	beq.n	80030c4 <UART_SetConfig+0x248>
 80030b2:	e00f      	b.n	80030d4 <UART_SetConfig+0x258>
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e052      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030bc:	2302      	movs	r3, #2
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e04e      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030c4:	2304      	movs	r3, #4
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e04a      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030cc:	2308      	movs	r3, #8
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e046      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e042      	b.n	8003162 <UART_SetConfig+0x2e6>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a17      	ldr	r2, [pc, #92]	; (8003140 <UART_SetConfig+0x2c4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d13a      	bne.n	800315c <UART_SetConfig+0x2e0>
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <UART_SetConfig+0x2cc>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f4:	d01a      	beq.n	800312c <UART_SetConfig+0x2b0>
 80030f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030fa:	d81b      	bhi.n	8003134 <UART_SetConfig+0x2b8>
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003100:	d00c      	beq.n	800311c <UART_SetConfig+0x2a0>
 8003102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003106:	d815      	bhi.n	8003134 <UART_SetConfig+0x2b8>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <UART_SetConfig+0x298>
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d008      	beq.n	8003124 <UART_SetConfig+0x2a8>
 8003112:	e00f      	b.n	8003134 <UART_SetConfig+0x2b8>
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311a:	e022      	b.n	8003162 <UART_SetConfig+0x2e6>
 800311c:	2302      	movs	r3, #2
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e01e      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003124:	2304      	movs	r3, #4
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e01a      	b.n	8003162 <UART_SetConfig+0x2e6>
 800312c:	2308      	movs	r3, #8
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e016      	b.n	8003162 <UART_SetConfig+0x2e6>
 8003134:	2310      	movs	r3, #16
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e012      	b.n	8003162 <UART_SetConfig+0x2e6>
 800313c:	efff69f3 	.word	0xefff69f3
 8003140:	40008000 	.word	0x40008000
 8003144:	40013800 	.word	0x40013800
 8003148:	40021000 	.word	0x40021000
 800314c:	40004400 	.word	0x40004400
 8003150:	40004800 	.word	0x40004800
 8003154:	40004c00 	.word	0x40004c00
 8003158:	40005000 	.word	0x40005000
 800315c:	2310      	movs	r3, #16
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a9f      	ldr	r2, [pc, #636]	; (80033e4 <UART_SetConfig+0x568>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d17a      	bne.n	8003262 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800316c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003170:	2b08      	cmp	r3, #8
 8003172:	d824      	bhi.n	80031be <UART_SetConfig+0x342>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <UART_SetConfig+0x300>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031a1 	.word	0x080031a1
 8003180:	080031bf 	.word	0x080031bf
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031bf 	.word	0x080031bf
 800318c:	080031af 	.word	0x080031af
 8003190:	080031bf 	.word	0x080031bf
 8003194:	080031bf 	.word	0x080031bf
 8003198:	080031bf 	.word	0x080031bf
 800319c:	080031b7 	.word	0x080031b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7ff f842 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 80031a4:	61f8      	str	r0, [r7, #28]
        break;
 80031a6:	e010      	b.n	80031ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <UART_SetConfig+0x56c>)
 80031aa:	61fb      	str	r3, [r7, #28]
        break;
 80031ac:	e00d      	b.n	80031ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ae:	f7fe ffa3 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80031b2:	61f8      	str	r0, [r7, #28]
        break;
 80031b4:	e009      	b.n	80031ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ba:	61fb      	str	r3, [r7, #28]
        break;
 80031bc:	e005      	b.n	80031ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80fb 	beq.w	80033c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d305      	bcc.n	80031ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d903      	bls.n	80031f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031f4:	e0e8      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2200      	movs	r2, #0
 80031fa:	461c      	mov	r4, r3
 80031fc:	4615      	mov	r5, r2
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	022b      	lsls	r3, r5, #8
 8003208:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800320c:	0222      	lsls	r2, r4, #8
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	6849      	ldr	r1, [r1, #4]
 8003212:	0849      	lsrs	r1, r1, #1
 8003214:	2000      	movs	r0, #0
 8003216:	4688      	mov	r8, r1
 8003218:	4681      	mov	r9, r0
 800321a:	eb12 0a08 	adds.w	sl, r2, r8
 800321e:	eb43 0b09 	adc.w	fp, r3, r9
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003230:	4650      	mov	r0, sl
 8003232:	4659      	mov	r1, fp
 8003234:	f7fd f81c 	bl	8000270 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4613      	mov	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003246:	d308      	bcc.n	800325a <UART_SetConfig+0x3de>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324e:	d204      	bcs.n	800325a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	e0b6      	b.n	80033c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003260:	e0b2      	b.n	80033c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326a:	d15e      	bne.n	800332a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800326c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003270:	2b08      	cmp	r3, #8
 8003272:	d828      	bhi.n	80032c6 <UART_SetConfig+0x44a>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <UART_SetConfig+0x400>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032a9 	.word	0x080032a9
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032c7 	.word	0x080032c7
 800328c:	080032b7 	.word	0x080032b7
 8003290:	080032c7 	.word	0x080032c7
 8003294:	080032c7 	.word	0x080032c7
 8003298:	080032c7 	.word	0x080032c7
 800329c:	080032bf 	.word	0x080032bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7fe ffc2 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 80032a4:	61f8      	str	r0, [r7, #28]
        break;
 80032a6:	e014      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a8:	f7fe ffd4 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 80032ac:	61f8      	str	r0, [r7, #28]
        break;
 80032ae:	e010      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b0:	4b4d      	ldr	r3, [pc, #308]	; (80033e8 <UART_SetConfig+0x56c>)
 80032b2:	61fb      	str	r3, [r7, #28]
        break;
 80032b4:	e00d      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b6:	f7fe ff1f 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80032ba:	61f8      	str	r0, [r7, #28]
        break;
 80032bc:	e009      	b.n	80032d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c2:	61fb      	str	r3, [r7, #28]
        break;
 80032c4:	e005      	b.n	80032d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d077      	beq.n	80033c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005a      	lsls	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d916      	bls.n	8003322 <UART_SetConfig+0x4a6>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fa:	d212      	bcs.n	8003322 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	b29a      	uxth	r2, r3
 8003312:	8afb      	ldrh	r3, [r7, #22]
 8003314:	4313      	orrs	r3, r2
 8003316:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	8afa      	ldrh	r2, [r7, #22]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	e052      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003328:	e04e      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800332a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800332e:	2b08      	cmp	r3, #8
 8003330:	d827      	bhi.n	8003382 <UART_SetConfig+0x506>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x4bc>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	08003365 	.word	0x08003365
 8003340:	0800336d 	.word	0x0800336d
 8003344:	08003383 	.word	0x08003383
 8003348:	08003373 	.word	0x08003373
 800334c:	08003383 	.word	0x08003383
 8003350:	08003383 	.word	0x08003383
 8003354:	08003383 	.word	0x08003383
 8003358:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7fe ff64 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8003360:	61f8      	str	r0, [r7, #28]
        break;
 8003362:	e014      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7fe ff76 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e010      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <UART_SetConfig+0x56c>)
 800336e:	61fb      	str	r3, [r7, #28]
        break;
 8003370:	e00d      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fec1 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 8003376:	61f8      	str	r0, [r7, #28]
        break;
 8003378:	e009      	b.n	800338e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61fb      	str	r3, [r7, #28]
        break;
 8003380:	e005      	b.n	800338e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800338c:	bf00      	nop
    }

    if (pclk != 0U)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d019      	beq.n	80033c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	085a      	lsrs	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	441a      	add	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d909      	bls.n	80033c2 <UART_SetConfig+0x546>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d205      	bcs.n	80033c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e002      	b.n	80033c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e2:	bf00      	nop
 80033e4:	40008000 	.word	0x40008000
 80033e8:	00f42400 	.word	0x00f42400

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01a      	beq.n	8003502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ea:	d10a      	bne.n	8003502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003540:	f7fd fd66 	bl	8001010 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d10e      	bne.n	8003572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f82d 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e023      	b.n	80035ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d10e      	bne.n	800359e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f817 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00d      	b.n	80035ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b09c      	sub	sp, #112	; 0x70
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d2:	e0a5      	b.n	8003720 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	f000 80a1 	beq.w	8003720 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fd fd17 	bl	8001010 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80035ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d13e      	bne.n	8003672 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003608:	667b      	str	r3, [r7, #100]	; 0x64
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003614:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e6      	bne.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	663b      	str	r3, [r7, #96]	; 0x60
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3308      	adds	r3, #8
 8003644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003646:	64ba      	str	r2, [r7, #72]	; 0x48
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800364c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e5      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e067      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d04f      	beq.n	8003720 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368e:	d147      	bne.n	8003720 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003698:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e6      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	613b      	str	r3, [r7, #16]
   return(result);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036ec:	623a      	str	r2, [r7, #32]
 80036ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e010      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	429a      	cmp	r2, r3
 800373c:	f43f af4a 	beq.w	80035d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3770      	adds	r7, #112	; 0x70
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <__errno>:
 800374c:	4b01      	ldr	r3, [pc, #4]	; (8003754 <__errno+0x8>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000010 	.word	0x20000010

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	; (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	; (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	; (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	; (800379c <__libc_init_array+0x44>)
 800376c:	f000 ffae 	bl	80046cc <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	08004810 	.word	0x08004810
 8003794:	08004810 	.word	0x08004810
 8003798:	08004810 	.word	0x08004810
 800379c:	08004814 	.word	0x08004814

080037a0 <memset>:
 80037a0:	4402      	add	r2, r0
 80037a2:	4603      	mov	r3, r0
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d100      	bne.n	80037aa <memset+0xa>
 80037a8:	4770      	bx	lr
 80037aa:	f803 1b01 	strb.w	r1, [r3], #1
 80037ae:	e7f9      	b.n	80037a4 <memset+0x4>

080037b0 <iprintf>:
 80037b0:	b40f      	push	{r0, r1, r2, r3}
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <iprintf+0x2c>)
 80037b4:	b513      	push	{r0, r1, r4, lr}
 80037b6:	681c      	ldr	r4, [r3, #0]
 80037b8:	b124      	cbz	r4, 80037c4 <iprintf+0x14>
 80037ba:	69a3      	ldr	r3, [r4, #24]
 80037bc:	b913      	cbnz	r3, 80037c4 <iprintf+0x14>
 80037be:	4620      	mov	r0, r4
 80037c0:	f000 f866 	bl	8003890 <__sinit>
 80037c4:	ab05      	add	r3, sp, #20
 80037c6:	9a04      	ldr	r2, [sp, #16]
 80037c8:	68a1      	ldr	r1, [r4, #8]
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 f9bd 	bl	8003b4c <_vfiprintf_r>
 80037d2:	b002      	add	sp, #8
 80037d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d8:	b004      	add	sp, #16
 80037da:	4770      	bx	lr
 80037dc:	20000010 	.word	0x20000010

080037e0 <std>:
 80037e0:	2300      	movs	r3, #0
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
 80037e6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ee:	6083      	str	r3, [r0, #8]
 80037f0:	8181      	strh	r1, [r0, #12]
 80037f2:	6643      	str	r3, [r0, #100]	; 0x64
 80037f4:	81c2      	strh	r2, [r0, #14]
 80037f6:	6183      	str	r3, [r0, #24]
 80037f8:	4619      	mov	r1, r3
 80037fa:	2208      	movs	r2, #8
 80037fc:	305c      	adds	r0, #92	; 0x5c
 80037fe:	f7ff ffcf 	bl	80037a0 <memset>
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <std+0x38>)
 8003804:	6263      	str	r3, [r4, #36]	; 0x24
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <std+0x3c>)
 8003808:	62a3      	str	r3, [r4, #40]	; 0x28
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <std+0x40>)
 800380c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <std+0x44>)
 8003810:	6224      	str	r4, [r4, #32]
 8003812:	6323      	str	r3, [r4, #48]	; 0x30
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	080040f5 	.word	0x080040f5
 800381c:	08004117 	.word	0x08004117
 8003820:	0800414f 	.word	0x0800414f
 8003824:	08004173 	.word	0x08004173

08003828 <_cleanup_r>:
 8003828:	4901      	ldr	r1, [pc, #4]	; (8003830 <_cleanup_r+0x8>)
 800382a:	f000 b8af 	b.w	800398c <_fwalk_reent>
 800382e:	bf00      	nop
 8003830:	0800444d 	.word	0x0800444d

08003834 <__sfmoreglue>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	2268      	movs	r2, #104	; 0x68
 8003838:	1e4d      	subs	r5, r1, #1
 800383a:	4355      	muls	r5, r2
 800383c:	460e      	mov	r6, r1
 800383e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003842:	f000 f8e5 	bl	8003a10 <_malloc_r>
 8003846:	4604      	mov	r4, r0
 8003848:	b140      	cbz	r0, 800385c <__sfmoreglue+0x28>
 800384a:	2100      	movs	r1, #0
 800384c:	e9c0 1600 	strd	r1, r6, [r0]
 8003850:	300c      	adds	r0, #12
 8003852:	60a0      	str	r0, [r4, #8]
 8003854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003858:	f7ff ffa2 	bl	80037a0 <memset>
 800385c:	4620      	mov	r0, r4
 800385e:	bd70      	pop	{r4, r5, r6, pc}

08003860 <__sfp_lock_acquire>:
 8003860:	4801      	ldr	r0, [pc, #4]	; (8003868 <__sfp_lock_acquire+0x8>)
 8003862:	f000 b8b3 	b.w	80039cc <__retarget_lock_acquire_recursive>
 8003866:	bf00      	nop
 8003868:	20000141 	.word	0x20000141

0800386c <__sfp_lock_release>:
 800386c:	4801      	ldr	r0, [pc, #4]	; (8003874 <__sfp_lock_release+0x8>)
 800386e:	f000 b8ae 	b.w	80039ce <__retarget_lock_release_recursive>
 8003872:	bf00      	nop
 8003874:	20000141 	.word	0x20000141

08003878 <__sinit_lock_acquire>:
 8003878:	4801      	ldr	r0, [pc, #4]	; (8003880 <__sinit_lock_acquire+0x8>)
 800387a:	f000 b8a7 	b.w	80039cc <__retarget_lock_acquire_recursive>
 800387e:	bf00      	nop
 8003880:	20000142 	.word	0x20000142

08003884 <__sinit_lock_release>:
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <__sinit_lock_release+0x8>)
 8003886:	f000 b8a2 	b.w	80039ce <__retarget_lock_release_recursive>
 800388a:	bf00      	nop
 800388c:	20000142 	.word	0x20000142

08003890 <__sinit>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
 8003894:	f7ff fff0 	bl	8003878 <__sinit_lock_acquire>
 8003898:	69a3      	ldr	r3, [r4, #24]
 800389a:	b11b      	cbz	r3, 80038a4 <__sinit+0x14>
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	f7ff bff0 	b.w	8003884 <__sinit_lock_release>
 80038a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038a8:	6523      	str	r3, [r4, #80]	; 0x50
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <__sinit+0x68>)
 80038ac:	4a13      	ldr	r2, [pc, #76]	; (80038fc <__sinit+0x6c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80038b2:	42a3      	cmp	r3, r4
 80038b4:	bf04      	itt	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	61a3      	streq	r3, [r4, #24]
 80038ba:	4620      	mov	r0, r4
 80038bc:	f000 f820 	bl	8003900 <__sfp>
 80038c0:	6060      	str	r0, [r4, #4]
 80038c2:	4620      	mov	r0, r4
 80038c4:	f000 f81c 	bl	8003900 <__sfp>
 80038c8:	60a0      	str	r0, [r4, #8]
 80038ca:	4620      	mov	r0, r4
 80038cc:	f000 f818 	bl	8003900 <__sfp>
 80038d0:	2200      	movs	r2, #0
 80038d2:	60e0      	str	r0, [r4, #12]
 80038d4:	2104      	movs	r1, #4
 80038d6:	6860      	ldr	r0, [r4, #4]
 80038d8:	f7ff ff82 	bl	80037e0 <std>
 80038dc:	68a0      	ldr	r0, [r4, #8]
 80038de:	2201      	movs	r2, #1
 80038e0:	2109      	movs	r1, #9
 80038e2:	f7ff ff7d 	bl	80037e0 <std>
 80038e6:	68e0      	ldr	r0, [r4, #12]
 80038e8:	2202      	movs	r2, #2
 80038ea:	2112      	movs	r1, #18
 80038ec:	f7ff ff78 	bl	80037e0 <std>
 80038f0:	2301      	movs	r3, #1
 80038f2:	61a3      	str	r3, [r4, #24]
 80038f4:	e7d2      	b.n	800389c <__sinit+0xc>
 80038f6:	bf00      	nop
 80038f8:	08004770 	.word	0x08004770
 80038fc:	08003829 	.word	0x08003829

08003900 <__sfp>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	4607      	mov	r7, r0
 8003904:	f7ff ffac 	bl	8003860 <__sfp_lock_acquire>
 8003908:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <__sfp+0x84>)
 800390a:	681e      	ldr	r6, [r3, #0]
 800390c:	69b3      	ldr	r3, [r6, #24]
 800390e:	b913      	cbnz	r3, 8003916 <__sfp+0x16>
 8003910:	4630      	mov	r0, r6
 8003912:	f7ff ffbd 	bl	8003890 <__sinit>
 8003916:	3648      	adds	r6, #72	; 0x48
 8003918:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800391c:	3b01      	subs	r3, #1
 800391e:	d503      	bpl.n	8003928 <__sfp+0x28>
 8003920:	6833      	ldr	r3, [r6, #0]
 8003922:	b30b      	cbz	r3, 8003968 <__sfp+0x68>
 8003924:	6836      	ldr	r6, [r6, #0]
 8003926:	e7f7      	b.n	8003918 <__sfp+0x18>
 8003928:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800392c:	b9d5      	cbnz	r5, 8003964 <__sfp+0x64>
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <__sfp+0x88>)
 8003930:	60e3      	str	r3, [r4, #12]
 8003932:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003936:	6665      	str	r5, [r4, #100]	; 0x64
 8003938:	f000 f847 	bl	80039ca <__retarget_lock_init_recursive>
 800393c:	f7ff ff96 	bl	800386c <__sfp_lock_release>
 8003940:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003944:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003948:	6025      	str	r5, [r4, #0]
 800394a:	61a5      	str	r5, [r4, #24]
 800394c:	2208      	movs	r2, #8
 800394e:	4629      	mov	r1, r5
 8003950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003954:	f7ff ff24 	bl	80037a0 <memset>
 8003958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800395c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003960:	4620      	mov	r0, r4
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003964:	3468      	adds	r4, #104	; 0x68
 8003966:	e7d9      	b.n	800391c <__sfp+0x1c>
 8003968:	2104      	movs	r1, #4
 800396a:	4638      	mov	r0, r7
 800396c:	f7ff ff62 	bl	8003834 <__sfmoreglue>
 8003970:	4604      	mov	r4, r0
 8003972:	6030      	str	r0, [r6, #0]
 8003974:	2800      	cmp	r0, #0
 8003976:	d1d5      	bne.n	8003924 <__sfp+0x24>
 8003978:	f7ff ff78 	bl	800386c <__sfp_lock_release>
 800397c:	230c      	movs	r3, #12
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	e7ee      	b.n	8003960 <__sfp+0x60>
 8003982:	bf00      	nop
 8003984:	08004770 	.word	0x08004770
 8003988:	ffff0001 	.word	0xffff0001

0800398c <_fwalk_reent>:
 800398c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003990:	4606      	mov	r6, r0
 8003992:	4688      	mov	r8, r1
 8003994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003998:	2700      	movs	r7, #0
 800399a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800399e:	f1b9 0901 	subs.w	r9, r9, #1
 80039a2:	d505      	bpl.n	80039b0 <_fwalk_reent+0x24>
 80039a4:	6824      	ldr	r4, [r4, #0]
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d1f7      	bne.n	800399a <_fwalk_reent+0xe>
 80039aa:	4638      	mov	r0, r7
 80039ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b0:	89ab      	ldrh	r3, [r5, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d907      	bls.n	80039c6 <_fwalk_reent+0x3a>
 80039b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039ba:	3301      	adds	r3, #1
 80039bc:	d003      	beq.n	80039c6 <_fwalk_reent+0x3a>
 80039be:	4629      	mov	r1, r5
 80039c0:	4630      	mov	r0, r6
 80039c2:	47c0      	blx	r8
 80039c4:	4307      	orrs	r7, r0
 80039c6:	3568      	adds	r5, #104	; 0x68
 80039c8:	e7e9      	b.n	800399e <_fwalk_reent+0x12>

080039ca <__retarget_lock_init_recursive>:
 80039ca:	4770      	bx	lr

080039cc <__retarget_lock_acquire_recursive>:
 80039cc:	4770      	bx	lr

080039ce <__retarget_lock_release_recursive>:
 80039ce:	4770      	bx	lr

080039d0 <sbrk_aligned>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4e0e      	ldr	r6, [pc, #56]	; (8003a0c <sbrk_aligned+0x3c>)
 80039d4:	460c      	mov	r4, r1
 80039d6:	6831      	ldr	r1, [r6, #0]
 80039d8:	4605      	mov	r5, r0
 80039da:	b911      	cbnz	r1, 80039e2 <sbrk_aligned+0x12>
 80039dc:	f000 fb7a 	bl	80040d4 <_sbrk_r>
 80039e0:	6030      	str	r0, [r6, #0]
 80039e2:	4621      	mov	r1, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 fb75 	bl	80040d4 <_sbrk_r>
 80039ea:	1c43      	adds	r3, r0, #1
 80039ec:	d00a      	beq.n	8003a04 <sbrk_aligned+0x34>
 80039ee:	1cc4      	adds	r4, r0, #3
 80039f0:	f024 0403 	bic.w	r4, r4, #3
 80039f4:	42a0      	cmp	r0, r4
 80039f6:	d007      	beq.n	8003a08 <sbrk_aligned+0x38>
 80039f8:	1a21      	subs	r1, r4, r0
 80039fa:	4628      	mov	r0, r5
 80039fc:	f000 fb6a 	bl	80040d4 <_sbrk_r>
 8003a00:	3001      	adds	r0, #1
 8003a02:	d101      	bne.n	8003a08 <sbrk_aligned+0x38>
 8003a04:	f04f 34ff 	mov.w	r4, #4294967295
 8003a08:	4620      	mov	r0, r4
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	20000148 	.word	0x20000148

08003a10 <_malloc_r>:
 8003a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a14:	1ccd      	adds	r5, r1, #3
 8003a16:	f025 0503 	bic.w	r5, r5, #3
 8003a1a:	3508      	adds	r5, #8
 8003a1c:	2d0c      	cmp	r5, #12
 8003a1e:	bf38      	it	cc
 8003a20:	250c      	movcc	r5, #12
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	4607      	mov	r7, r0
 8003a26:	db01      	blt.n	8003a2c <_malloc_r+0x1c>
 8003a28:	42a9      	cmp	r1, r5
 8003a2a:	d905      	bls.n	8003a38 <_malloc_r+0x28>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	2600      	movs	r6, #0
 8003a32:	4630      	mov	r0, r6
 8003a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a38:	4e2e      	ldr	r6, [pc, #184]	; (8003af4 <_malloc_r+0xe4>)
 8003a3a:	f000 fdbb 	bl	80045b4 <__malloc_lock>
 8003a3e:	6833      	ldr	r3, [r6, #0]
 8003a40:	461c      	mov	r4, r3
 8003a42:	bb34      	cbnz	r4, 8003a92 <_malloc_r+0x82>
 8003a44:	4629      	mov	r1, r5
 8003a46:	4638      	mov	r0, r7
 8003a48:	f7ff ffc2 	bl	80039d0 <sbrk_aligned>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	4604      	mov	r4, r0
 8003a50:	d14d      	bne.n	8003aee <_malloc_r+0xde>
 8003a52:	6834      	ldr	r4, [r6, #0]
 8003a54:	4626      	mov	r6, r4
 8003a56:	2e00      	cmp	r6, #0
 8003a58:	d140      	bne.n	8003adc <_malloc_r+0xcc>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	4638      	mov	r0, r7
 8003a60:	eb04 0803 	add.w	r8, r4, r3
 8003a64:	f000 fb36 	bl	80040d4 <_sbrk_r>
 8003a68:	4580      	cmp	r8, r0
 8003a6a:	d13a      	bne.n	8003ae2 <_malloc_r+0xd2>
 8003a6c:	6821      	ldr	r1, [r4, #0]
 8003a6e:	3503      	adds	r5, #3
 8003a70:	1a6d      	subs	r5, r5, r1
 8003a72:	f025 0503 	bic.w	r5, r5, #3
 8003a76:	3508      	adds	r5, #8
 8003a78:	2d0c      	cmp	r5, #12
 8003a7a:	bf38      	it	cc
 8003a7c:	250c      	movcc	r5, #12
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4638      	mov	r0, r7
 8003a82:	f7ff ffa5 	bl	80039d0 <sbrk_aligned>
 8003a86:	3001      	adds	r0, #1
 8003a88:	d02b      	beq.n	8003ae2 <_malloc_r+0xd2>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	442b      	add	r3, r5
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	e00e      	b.n	8003ab0 <_malloc_r+0xa0>
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	1b52      	subs	r2, r2, r5
 8003a96:	d41e      	bmi.n	8003ad6 <_malloc_r+0xc6>
 8003a98:	2a0b      	cmp	r2, #11
 8003a9a:	d916      	bls.n	8003aca <_malloc_r+0xba>
 8003a9c:	1961      	adds	r1, r4, r5
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	6025      	str	r5, [r4, #0]
 8003aa2:	bf18      	it	ne
 8003aa4:	6059      	strne	r1, [r3, #4]
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	bf08      	it	eq
 8003aaa:	6031      	streq	r1, [r6, #0]
 8003aac:	5162      	str	r2, [r4, r5]
 8003aae:	604b      	str	r3, [r1, #4]
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f104 060b 	add.w	r6, r4, #11
 8003ab6:	f000 fd83 	bl	80045c0 <__malloc_unlock>
 8003aba:	f026 0607 	bic.w	r6, r6, #7
 8003abe:	1d23      	adds	r3, r4, #4
 8003ac0:	1af2      	subs	r2, r6, r3
 8003ac2:	d0b6      	beq.n	8003a32 <_malloc_r+0x22>
 8003ac4:	1b9b      	subs	r3, r3, r6
 8003ac6:	50a3      	str	r3, [r4, r2]
 8003ac8:	e7b3      	b.n	8003a32 <_malloc_r+0x22>
 8003aca:	6862      	ldr	r2, [r4, #4]
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	bf0c      	ite	eq
 8003ad0:	6032      	streq	r2, [r6, #0]
 8003ad2:	605a      	strne	r2, [r3, #4]
 8003ad4:	e7ec      	b.n	8003ab0 <_malloc_r+0xa0>
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	6864      	ldr	r4, [r4, #4]
 8003ada:	e7b2      	b.n	8003a42 <_malloc_r+0x32>
 8003adc:	4634      	mov	r4, r6
 8003ade:	6876      	ldr	r6, [r6, #4]
 8003ae0:	e7b9      	b.n	8003a56 <_malloc_r+0x46>
 8003ae2:	230c      	movs	r3, #12
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	f000 fd6a 	bl	80045c0 <__malloc_unlock>
 8003aec:	e7a1      	b.n	8003a32 <_malloc_r+0x22>
 8003aee:	6025      	str	r5, [r4, #0]
 8003af0:	e7de      	b.n	8003ab0 <_malloc_r+0xa0>
 8003af2:	bf00      	nop
 8003af4:	20000144 	.word	0x20000144

08003af8 <__sfputc_r>:
 8003af8:	6893      	ldr	r3, [r2, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	b410      	push	{r4}
 8003b00:	6093      	str	r3, [r2, #8]
 8003b02:	da08      	bge.n	8003b16 <__sfputc_r+0x1e>
 8003b04:	6994      	ldr	r4, [r2, #24]
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	db01      	blt.n	8003b0e <__sfputc_r+0x16>
 8003b0a:	290a      	cmp	r1, #10
 8003b0c:	d103      	bne.n	8003b16 <__sfputc_r+0x1e>
 8003b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b12:	f000 bb33 	b.w	800417c <__swbuf_r>
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	1c58      	adds	r0, r3, #1
 8003b1a:	6010      	str	r0, [r2, #0]
 8003b1c:	7019      	strb	r1, [r3, #0]
 8003b1e:	4608      	mov	r0, r1
 8003b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <__sfputs_r>:
 8003b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b28:	4606      	mov	r6, r0
 8003b2a:	460f      	mov	r7, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	18d5      	adds	r5, r2, r3
 8003b30:	42ac      	cmp	r4, r5
 8003b32:	d101      	bne.n	8003b38 <__sfputs_r+0x12>
 8003b34:	2000      	movs	r0, #0
 8003b36:	e007      	b.n	8003b48 <__sfputs_r+0x22>
 8003b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff ffda 	bl	8003af8 <__sfputc_r>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d1f3      	bne.n	8003b30 <__sfputs_r+0xa>
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b4c <_vfiprintf_r>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	460d      	mov	r5, r1
 8003b52:	b09d      	sub	sp, #116	; 0x74
 8003b54:	4614      	mov	r4, r2
 8003b56:	4698      	mov	r8, r3
 8003b58:	4606      	mov	r6, r0
 8003b5a:	b118      	cbz	r0, 8003b64 <_vfiprintf_r+0x18>
 8003b5c:	6983      	ldr	r3, [r0, #24]
 8003b5e:	b90b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x18>
 8003b60:	f7ff fe96 	bl	8003890 <__sinit>
 8003b64:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <_vfiprintf_r+0x240>)
 8003b66:	429d      	cmp	r5, r3
 8003b68:	d11b      	bne.n	8003ba2 <_vfiprintf_r+0x56>
 8003b6a:	6875      	ldr	r5, [r6, #4]
 8003b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b6e:	07d9      	lsls	r1, r3, #31
 8003b70:	d405      	bmi.n	8003b7e <_vfiprintf_r+0x32>
 8003b72:	89ab      	ldrh	r3, [r5, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d402      	bmi.n	8003b7e <_vfiprintf_r+0x32>
 8003b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b7a:	f7ff ff27 	bl	80039cc <__retarget_lock_acquire_recursive>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	d501      	bpl.n	8003b88 <_vfiprintf_r+0x3c>
 8003b84:	692b      	ldr	r3, [r5, #16]
 8003b86:	b9eb      	cbnz	r3, 8003bc4 <_vfiprintf_r+0x78>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 fb5a 	bl	8004244 <__swsetup_r>
 8003b90:	b1c0      	cbz	r0, 8003bc4 <_vfiprintf_r+0x78>
 8003b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b94:	07dc      	lsls	r4, r3, #31
 8003b96:	d50e      	bpl.n	8003bb6 <_vfiprintf_r+0x6a>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	b01d      	add	sp, #116	; 0x74
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <_vfiprintf_r+0x244>)
 8003ba4:	429d      	cmp	r5, r3
 8003ba6:	d101      	bne.n	8003bac <_vfiprintf_r+0x60>
 8003ba8:	68b5      	ldr	r5, [r6, #8]
 8003baa:	e7df      	b.n	8003b6c <_vfiprintf_r+0x20>
 8003bac:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <_vfiprintf_r+0x248>)
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf08      	it	eq
 8003bb2:	68f5      	ldreq	r5, [r6, #12]
 8003bb4:	e7da      	b.n	8003b6c <_vfiprintf_r+0x20>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	0598      	lsls	r0, r3, #22
 8003bba:	d4ed      	bmi.n	8003b98 <_vfiprintf_r+0x4c>
 8003bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bbe:	f7ff ff06 	bl	80039ce <__retarget_lock_release_recursive>
 8003bc2:	e7e9      	b.n	8003b98 <_vfiprintf_r+0x4c>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc8:	2320      	movs	r3, #32
 8003bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd2:	2330      	movs	r3, #48	; 0x30
 8003bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003d98 <_vfiprintf_r+0x24c>
 8003bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bdc:	f04f 0901 	mov.w	r9, #1
 8003be0:	4623      	mov	r3, r4
 8003be2:	469a      	mov	sl, r3
 8003be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003be8:	b10a      	cbz	r2, 8003bee <_vfiprintf_r+0xa2>
 8003bea:	2a25      	cmp	r2, #37	; 0x25
 8003bec:	d1f9      	bne.n	8003be2 <_vfiprintf_r+0x96>
 8003bee:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf2:	d00b      	beq.n	8003c0c <_vfiprintf_r+0xc0>
 8003bf4:	465b      	mov	r3, fp
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7ff ff93 	bl	8003b26 <__sfputs_r>
 8003c00:	3001      	adds	r0, #1
 8003c02:	f000 80aa 	beq.w	8003d5a <_vfiprintf_r+0x20e>
 8003c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c08:	445a      	add	r2, fp
 8003c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a2 	beq.w	8003d5a <_vfiprintf_r+0x20e>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c20:	f10a 0a01 	add.w	sl, sl, #1
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c2e:	4654      	mov	r4, sl
 8003c30:	2205      	movs	r2, #5
 8003c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c36:	4858      	ldr	r0, [pc, #352]	; (8003d98 <_vfiprintf_r+0x24c>)
 8003c38:	f7fc faca 	bl	80001d0 <memchr>
 8003c3c:	9a04      	ldr	r2, [sp, #16]
 8003c3e:	b9d8      	cbnz	r0, 8003c78 <_vfiprintf_r+0x12c>
 8003c40:	06d1      	lsls	r1, r2, #27
 8003c42:	bf44      	itt	mi
 8003c44:	2320      	movmi	r3, #32
 8003c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c4a:	0713      	lsls	r3, r2, #28
 8003c4c:	bf44      	itt	mi
 8003c4e:	232b      	movmi	r3, #43	; 0x2b
 8003c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c54:	f89a 3000 	ldrb.w	r3, [sl]
 8003c58:	2b2a      	cmp	r3, #42	; 0x2a
 8003c5a:	d015      	beq.n	8003c88 <_vfiprintf_r+0x13c>
 8003c5c:	9a07      	ldr	r2, [sp, #28]
 8003c5e:	4654      	mov	r4, sl
 8003c60:	2000      	movs	r0, #0
 8003c62:	f04f 0c0a 	mov.w	ip, #10
 8003c66:	4621      	mov	r1, r4
 8003c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c6c:	3b30      	subs	r3, #48	; 0x30
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	d94e      	bls.n	8003d10 <_vfiprintf_r+0x1c4>
 8003c72:	b1b0      	cbz	r0, 8003ca2 <_vfiprintf_r+0x156>
 8003c74:	9207      	str	r2, [sp, #28]
 8003c76:	e014      	b.n	8003ca2 <_vfiprintf_r+0x156>
 8003c78:	eba0 0308 	sub.w	r3, r0, r8
 8003c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	46a2      	mov	sl, r4
 8003c86:	e7d2      	b.n	8003c2e <_vfiprintf_r+0xe2>
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	1d19      	adds	r1, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	9103      	str	r1, [sp, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bfbb      	ittet	lt
 8003c94:	425b      	neglt	r3, r3
 8003c96:	f042 0202 	orrlt.w	r2, r2, #2
 8003c9a:	9307      	strge	r3, [sp, #28]
 8003c9c:	9307      	strlt	r3, [sp, #28]
 8003c9e:	bfb8      	it	lt
 8003ca0:	9204      	strlt	r2, [sp, #16]
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca6:	d10c      	bne.n	8003cc2 <_vfiprintf_r+0x176>
 8003ca8:	7863      	ldrb	r3, [r4, #1]
 8003caa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cac:	d135      	bne.n	8003d1a <_vfiprintf_r+0x1ce>
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bfb8      	it	lt
 8003cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cbe:	3402      	adds	r4, #2
 8003cc0:	9305      	str	r3, [sp, #20]
 8003cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003da8 <_vfiprintf_r+0x25c>
 8003cc6:	7821      	ldrb	r1, [r4, #0]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4650      	mov	r0, sl
 8003ccc:	f7fc fa80 	bl	80001d0 <memchr>
 8003cd0:	b140      	cbz	r0, 8003ce4 <_vfiprintf_r+0x198>
 8003cd2:	2340      	movs	r3, #64	; 0x40
 8003cd4:	eba0 000a 	sub.w	r0, r0, sl
 8003cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8003cdc:	9b04      	ldr	r3, [sp, #16]
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	3401      	adds	r4, #1
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce8:	482c      	ldr	r0, [pc, #176]	; (8003d9c <_vfiprintf_r+0x250>)
 8003cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cee:	2206      	movs	r2, #6
 8003cf0:	f7fc fa6e 	bl	80001d0 <memchr>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d03f      	beq.n	8003d78 <_vfiprintf_r+0x22c>
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <_vfiprintf_r+0x254>)
 8003cfa:	bb1b      	cbnz	r3, 8003d44 <_vfiprintf_r+0x1f8>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	3307      	adds	r3, #7
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	3308      	adds	r3, #8
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	443b      	add	r3, r7
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	e767      	b.n	8003be0 <_vfiprintf_r+0x94>
 8003d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d14:	460c      	mov	r4, r1
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7a5      	b.n	8003c66 <_vfiprintf_r+0x11a>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	3401      	adds	r4, #1
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f04f 0c0a 	mov.w	ip, #10
 8003d26:	4620      	mov	r0, r4
 8003d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2c:	3a30      	subs	r2, #48	; 0x30
 8003d2e:	2a09      	cmp	r2, #9
 8003d30:	d903      	bls.n	8003d3a <_vfiprintf_r+0x1ee>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0c5      	beq.n	8003cc2 <_vfiprintf_r+0x176>
 8003d36:	9105      	str	r1, [sp, #20]
 8003d38:	e7c3      	b.n	8003cc2 <_vfiprintf_r+0x176>
 8003d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d3e:	4604      	mov	r4, r0
 8003d40:	2301      	movs	r3, #1
 8003d42:	e7f0      	b.n	8003d26 <_vfiprintf_r+0x1da>
 8003d44:	ab03      	add	r3, sp, #12
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <_vfiprintf_r+0x258>)
 8003d4c:	a904      	add	r1, sp, #16
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f3af 8000 	nop.w
 8003d54:	4607      	mov	r7, r0
 8003d56:	1c78      	adds	r0, r7, #1
 8003d58:	d1d6      	bne.n	8003d08 <_vfiprintf_r+0x1bc>
 8003d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d5c:	07d9      	lsls	r1, r3, #31
 8003d5e:	d405      	bmi.n	8003d6c <_vfiprintf_r+0x220>
 8003d60:	89ab      	ldrh	r3, [r5, #12]
 8003d62:	059a      	lsls	r2, r3, #22
 8003d64:	d402      	bmi.n	8003d6c <_vfiprintf_r+0x220>
 8003d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d68:	f7ff fe31 	bl	80039ce <__retarget_lock_release_recursive>
 8003d6c:	89ab      	ldrh	r3, [r5, #12]
 8003d6e:	065b      	lsls	r3, r3, #25
 8003d70:	f53f af12 	bmi.w	8003b98 <_vfiprintf_r+0x4c>
 8003d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d76:	e711      	b.n	8003b9c <_vfiprintf_r+0x50>
 8003d78:	ab03      	add	r3, sp, #12
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <_vfiprintf_r+0x258>)
 8003d80:	a904      	add	r1, sp, #16
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f880 	bl	8003e88 <_printf_i>
 8003d88:	e7e4      	b.n	8003d54 <_vfiprintf_r+0x208>
 8003d8a:	bf00      	nop
 8003d8c:	08004794 	.word	0x08004794
 8003d90:	080047b4 	.word	0x080047b4
 8003d94:	08004774 	.word	0x08004774
 8003d98:	080047d4 	.word	0x080047d4
 8003d9c:	080047de 	.word	0x080047de
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003b27 	.word	0x08003b27
 8003da8:	080047da 	.word	0x080047da

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4699      	mov	r9, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bfb8      	it	lt
 8003dc0:	4613      	movlt	r3, r2
 8003dc2:	6033      	str	r3, [r6, #0]
 8003dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc8:	4607      	mov	r7, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc26      	bgt.n	8003e42 <_printf_common+0x96>
 8003df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df8:	1e13      	subs	r3, r2, #0
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d42b      	bmi.n	8003e5c <_printf_common+0xb0>
 8003e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d01e      	beq.n	8003e50 <_printf_common+0xa4>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	68e5      	ldr	r5, [r4, #12]
 8003e16:	6832      	ldr	r2, [r6, #0]
 8003e18:	f003 0306 	and.w	r3, r3, #6
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	bf08      	it	eq
 8003e20:	1aad      	subeq	r5, r5, r2
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	bf0c      	ite	eq
 8003e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e2c:	2500      	movne	r5, #0
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bfc4      	itt	gt
 8003e32:	1a9b      	subgt	r3, r3, r2
 8003e34:	18ed      	addgt	r5, r5, r3
 8003e36:	2600      	movs	r6, #0
 8003e38:	341a      	adds	r4, #26
 8003e3a:	42b5      	cmp	r5, r6
 8003e3c:	d11a      	bne.n	8003e74 <_printf_common+0xc8>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e008      	b.n	8003e54 <_printf_common+0xa8>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4652      	mov	r2, sl
 8003e46:	4649      	mov	r1, r9
 8003e48:	4638      	mov	r0, r7
 8003e4a:	47c0      	blx	r8
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d103      	bne.n	8003e58 <_printf_common+0xac>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	3501      	adds	r5, #1
 8003e5a:	e7c6      	b.n	8003dea <_printf_common+0x3e>
 8003e5c:	18e1      	adds	r1, r4, r3
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	2030      	movs	r0, #48	; 0x30
 8003e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e66:	4422      	add	r2, r4
 8003e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e70:	3302      	adds	r3, #2
 8003e72:	e7c7      	b.n	8003e04 <_printf_common+0x58>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4622      	mov	r2, r4
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	47c0      	blx	r8
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d0e6      	beq.n	8003e50 <_printf_common+0xa4>
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7d9      	b.n	8003e3a <_printf_common+0x8e>
	...

08003e88 <_printf_i>:
 8003e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	7e0f      	ldrb	r7, [r1, #24]
 8003e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e90:	2f78      	cmp	r7, #120	; 0x78
 8003e92:	4691      	mov	r9, r2
 8003e94:	4680      	mov	r8, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	469a      	mov	sl, r3
 8003e9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e9e:	d807      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ea0:	2f62      	cmp	r7, #98	; 0x62
 8003ea2:	d80a      	bhi.n	8003eba <_printf_i+0x32>
 8003ea4:	2f00      	cmp	r7, #0
 8003ea6:	f000 80d8 	beq.w	800405a <_printf_i+0x1d2>
 8003eaa:	2f58      	cmp	r7, #88	; 0x58
 8003eac:	f000 80a3 	beq.w	8003ff6 <_printf_i+0x16e>
 8003eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb8:	e03a      	b.n	8003f30 <_printf_i+0xa8>
 8003eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ebe:	2b15      	cmp	r3, #21
 8003ec0:	d8f6      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ec2:	a101      	add	r1, pc, #4	; (adr r1, 8003ec8 <_printf_i+0x40>)
 8003ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f35 	.word	0x08003f35
 8003ed0:	08003eb1 	.word	0x08003eb1
 8003ed4:	08003eb1 	.word	0x08003eb1
 8003ed8:	08003eb1 	.word	0x08003eb1
 8003edc:	08003eb1 	.word	0x08003eb1
 8003ee0:	08003f35 	.word	0x08003f35
 8003ee4:	08003eb1 	.word	0x08003eb1
 8003ee8:	08003eb1 	.word	0x08003eb1
 8003eec:	08003eb1 	.word	0x08003eb1
 8003ef0:	08003eb1 	.word	0x08003eb1
 8003ef4:	08004041 	.word	0x08004041
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08004023 	.word	0x08004023
 8003f00:	08003eb1 	.word	0x08003eb1
 8003f04:	08003eb1 	.word	0x08003eb1
 8003f08:	08004063 	.word	0x08004063
 8003f0c:	08003eb1 	.word	0x08003eb1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003eb1 	.word	0x08003eb1
 8003f18:	08003eb1 	.word	0x08003eb1
 8003f1c:	0800402b 	.word	0x0800402b
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	602a      	str	r2, [r5, #0]
 8003f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a3      	b.n	800407c <_printf_i+0x1f4>
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	6829      	ldr	r1, [r5, #0]
 8003f38:	0606      	lsls	r6, r0, #24
 8003f3a:	f101 0304 	add.w	r3, r1, #4
 8003f3e:	d50a      	bpl.n	8003f56 <_printf_i+0xce>
 8003f40:	680e      	ldr	r6, [r1, #0]
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	2e00      	cmp	r6, #0
 8003f46:	da03      	bge.n	8003f50 <_printf_i+0xc8>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	4276      	negs	r6, r6
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f50:	485e      	ldr	r0, [pc, #376]	; (80040cc <_printf_i+0x244>)
 8003f52:	230a      	movs	r3, #10
 8003f54:	e019      	b.n	8003f8a <_printf_i+0x102>
 8003f56:	680e      	ldr	r6, [r1, #0]
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f5e:	bf18      	it	ne
 8003f60:	b236      	sxthne	r6, r6
 8003f62:	e7ef      	b.n	8003f44 <_printf_i+0xbc>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	6820      	ldr	r0, [r4, #0]
 8003f68:	1d19      	adds	r1, r3, #4
 8003f6a:	6029      	str	r1, [r5, #0]
 8003f6c:	0601      	lsls	r1, r0, #24
 8003f6e:	d501      	bpl.n	8003f74 <_printf_i+0xec>
 8003f70:	681e      	ldr	r6, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <_printf_i+0xf2>
 8003f74:	0646      	lsls	r6, r0, #25
 8003f76:	d5fb      	bpl.n	8003f70 <_printf_i+0xe8>
 8003f78:	881e      	ldrh	r6, [r3, #0]
 8003f7a:	4854      	ldr	r0, [pc, #336]	; (80040cc <_printf_i+0x244>)
 8003f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f7e:	bf0c      	ite	eq
 8003f80:	2308      	moveq	r3, #8
 8003f82:	230a      	movne	r3, #10
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f8a:	6865      	ldr	r5, [r4, #4]
 8003f8c:	60a5      	str	r5, [r4, #8]
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	bfa2      	ittt	ge
 8003f92:	6821      	ldrge	r1, [r4, #0]
 8003f94:	f021 0104 	bicge.w	r1, r1, #4
 8003f98:	6021      	strge	r1, [r4, #0]
 8003f9a:	b90e      	cbnz	r6, 8003fa0 <_printf_i+0x118>
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	d04d      	beq.n	800403c <_printf_i+0x1b4>
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8003faa:	5dc7      	ldrb	r7, [r0, r7]
 8003fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fb0:	4637      	mov	r7, r6
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	460e      	mov	r6, r1
 8003fb6:	d9f4      	bls.n	8003fa2 <_printf_i+0x11a>
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10b      	bne.n	8003fd4 <_printf_i+0x14c>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	07de      	lsls	r6, r3, #31
 8003fc0:	d508      	bpl.n	8003fd4 <_printf_i+0x14c>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	6861      	ldr	r1, [r4, #4]
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	bfde      	ittt	le
 8003fca:	2330      	movle	r3, #48	; 0x30
 8003fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fd4:	1b52      	subs	r2, r2, r5
 8003fd6:	6122      	str	r2, [r4, #16]
 8003fd8:	f8cd a000 	str.w	sl, [sp]
 8003fdc:	464b      	mov	r3, r9
 8003fde:	aa03      	add	r2, sp, #12
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f7ff fee2 	bl	8003dac <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d14c      	bne.n	8004086 <_printf_i+0x1fe>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b004      	add	sp, #16
 8003ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff6:	4835      	ldr	r0, [pc, #212]	; (80040cc <_printf_i+0x244>)
 8003ff8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ffc:	6829      	ldr	r1, [r5, #0]
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f851 6b04 	ldr.w	r6, [r1], #4
 8004004:	6029      	str	r1, [r5, #0]
 8004006:	061d      	lsls	r5, r3, #24
 8004008:	d514      	bpl.n	8004034 <_printf_i+0x1ac>
 800400a:	07df      	lsls	r7, r3, #31
 800400c:	bf44      	itt	mi
 800400e:	f043 0320 	orrmi.w	r3, r3, #32
 8004012:	6023      	strmi	r3, [r4, #0]
 8004014:	b91e      	cbnz	r6, 800401e <_printf_i+0x196>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f023 0320 	bic.w	r3, r3, #32
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	2310      	movs	r3, #16
 8004020:	e7b0      	b.n	8003f84 <_printf_i+0xfc>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	2378      	movs	r3, #120	; 0x78
 800402c:	4828      	ldr	r0, [pc, #160]	; (80040d0 <_printf_i+0x248>)
 800402e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004032:	e7e3      	b.n	8003ffc <_printf_i+0x174>
 8004034:	0659      	lsls	r1, r3, #25
 8004036:	bf48      	it	mi
 8004038:	b2b6      	uxthmi	r6, r6
 800403a:	e7e6      	b.n	800400a <_printf_i+0x182>
 800403c:	4615      	mov	r5, r2
 800403e:	e7bb      	b.n	8003fb8 <_printf_i+0x130>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	6826      	ldr	r6, [r4, #0]
 8004044:	6961      	ldr	r1, [r4, #20]
 8004046:	1d18      	adds	r0, r3, #4
 8004048:	6028      	str	r0, [r5, #0]
 800404a:	0635      	lsls	r5, r6, #24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	d501      	bpl.n	8004054 <_printf_i+0x1cc>
 8004050:	6019      	str	r1, [r3, #0]
 8004052:	e002      	b.n	800405a <_printf_i+0x1d2>
 8004054:	0670      	lsls	r0, r6, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0x1c8>
 8004058:	8019      	strh	r1, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	4615      	mov	r5, r2
 8004060:	e7ba      	b.n	8003fd8 <_printf_i+0x150>
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	602a      	str	r2, [r5, #0]
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	2100      	movs	r1, #0
 800406e:	4628      	mov	r0, r5
 8004070:	f7fc f8ae 	bl	80001d0 <memchr>
 8004074:	b108      	cbz	r0, 800407a <_printf_i+0x1f2>
 8004076:	1b40      	subs	r0, r0, r5
 8004078:	6060      	str	r0, [r4, #4]
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	6123      	str	r3, [r4, #16]
 800407e:	2300      	movs	r3, #0
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004084:	e7a8      	b.n	8003fd8 <_printf_i+0x150>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	462a      	mov	r2, r5
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	47d0      	blx	sl
 8004090:	3001      	adds	r0, #1
 8004092:	d0ab      	beq.n	8003fec <_printf_i+0x164>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d413      	bmi.n	80040c2 <_printf_i+0x23a>
 800409a:	68e0      	ldr	r0, [r4, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	bfb8      	it	lt
 80040a2:	4618      	movlt	r0, r3
 80040a4:	e7a4      	b.n	8003ff0 <_printf_i+0x168>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4632      	mov	r2, r6
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	47d0      	blx	sl
 80040b0:	3001      	adds	r0, #1
 80040b2:	d09b      	beq.n	8003fec <_printf_i+0x164>
 80040b4:	3501      	adds	r5, #1
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	1a5b      	subs	r3, r3, r1
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dcf2      	bgt.n	80040a6 <_printf_i+0x21e>
 80040c0:	e7eb      	b.n	800409a <_printf_i+0x212>
 80040c2:	2500      	movs	r5, #0
 80040c4:	f104 0619 	add.w	r6, r4, #25
 80040c8:	e7f5      	b.n	80040b6 <_printf_i+0x22e>
 80040ca:	bf00      	nop
 80040cc:	080047e5 	.word	0x080047e5
 80040d0:	080047f6 	.word	0x080047f6

080040d4 <_sbrk_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4d06      	ldr	r5, [pc, #24]	; (80040f0 <_sbrk_r+0x1c>)
 80040d8:	2300      	movs	r3, #0
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	f7fc febc 	bl	8000e5c <_sbrk>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_sbrk_r+0x1a>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_sbrk_r+0x1a>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	2000014c 	.word	0x2000014c

080040f4 <__sread>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	460c      	mov	r4, r1
 80040f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fc:	f000 fab2 	bl	8004664 <_read_r>
 8004100:	2800      	cmp	r0, #0
 8004102:	bfab      	itete	ge
 8004104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004106:	89a3      	ldrhlt	r3, [r4, #12]
 8004108:	181b      	addge	r3, r3, r0
 800410a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800410e:	bfac      	ite	ge
 8004110:	6563      	strge	r3, [r4, #84]	; 0x54
 8004112:	81a3      	strhlt	r3, [r4, #12]
 8004114:	bd10      	pop	{r4, pc}

08004116 <__swrite>:
 8004116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800411a:	461f      	mov	r7, r3
 800411c:	898b      	ldrh	r3, [r1, #12]
 800411e:	05db      	lsls	r3, r3, #23
 8004120:	4605      	mov	r5, r0
 8004122:	460c      	mov	r4, r1
 8004124:	4616      	mov	r6, r2
 8004126:	d505      	bpl.n	8004134 <__swrite+0x1e>
 8004128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412c:	2302      	movs	r3, #2
 800412e:	2200      	movs	r2, #0
 8004130:	f000 f9c8 	bl	80044c4 <_lseek_r>
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800413a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800413e:	81a3      	strh	r3, [r4, #12]
 8004140:	4632      	mov	r2, r6
 8004142:	463b      	mov	r3, r7
 8004144:	4628      	mov	r0, r5
 8004146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800414a:	f000 b869 	b.w	8004220 <_write_r>

0800414e <__sseek>:
 800414e:	b510      	push	{r4, lr}
 8004150:	460c      	mov	r4, r1
 8004152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004156:	f000 f9b5 	bl	80044c4 <_lseek_r>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	bf15      	itete	ne
 8004160:	6560      	strne	r0, [r4, #84]	; 0x54
 8004162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800416a:	81a3      	strheq	r3, [r4, #12]
 800416c:	bf18      	it	ne
 800416e:	81a3      	strhne	r3, [r4, #12]
 8004170:	bd10      	pop	{r4, pc}

08004172 <__sclose>:
 8004172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004176:	f000 b8d3 	b.w	8004320 <_close_r>
	...

0800417c <__swbuf_r>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	460e      	mov	r6, r1
 8004180:	4614      	mov	r4, r2
 8004182:	4605      	mov	r5, r0
 8004184:	b118      	cbz	r0, 800418e <__swbuf_r+0x12>
 8004186:	6983      	ldr	r3, [r0, #24]
 8004188:	b90b      	cbnz	r3, 800418e <__swbuf_r+0x12>
 800418a:	f7ff fb81 	bl	8003890 <__sinit>
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <__swbuf_r+0x98>)
 8004190:	429c      	cmp	r4, r3
 8004192:	d12b      	bne.n	80041ec <__swbuf_r+0x70>
 8004194:	686c      	ldr	r4, [r5, #4]
 8004196:	69a3      	ldr	r3, [r4, #24]
 8004198:	60a3      	str	r3, [r4, #8]
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	071a      	lsls	r2, r3, #28
 800419e:	d52f      	bpl.n	8004200 <__swbuf_r+0x84>
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	b36b      	cbz	r3, 8004200 <__swbuf_r+0x84>
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	1ac0      	subs	r0, r0, r3
 80041aa:	6963      	ldr	r3, [r4, #20]
 80041ac:	b2f6      	uxtb	r6, r6
 80041ae:	4283      	cmp	r3, r0
 80041b0:	4637      	mov	r7, r6
 80041b2:	dc04      	bgt.n	80041be <__swbuf_r+0x42>
 80041b4:	4621      	mov	r1, r4
 80041b6:	4628      	mov	r0, r5
 80041b8:	f000 f948 	bl	800444c <_fflush_r>
 80041bc:	bb30      	cbnz	r0, 800420c <__swbuf_r+0x90>
 80041be:	68a3      	ldr	r3, [r4, #8]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60a3      	str	r3, [r4, #8]
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	701e      	strb	r6, [r3, #0]
 80041cc:	6963      	ldr	r3, [r4, #20]
 80041ce:	3001      	adds	r0, #1
 80041d0:	4283      	cmp	r3, r0
 80041d2:	d004      	beq.n	80041de <__swbuf_r+0x62>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	07db      	lsls	r3, r3, #31
 80041d8:	d506      	bpl.n	80041e8 <__swbuf_r+0x6c>
 80041da:	2e0a      	cmp	r6, #10
 80041dc:	d104      	bne.n	80041e8 <__swbuf_r+0x6c>
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f933 	bl	800444c <_fflush_r>
 80041e6:	b988      	cbnz	r0, 800420c <__swbuf_r+0x90>
 80041e8:	4638      	mov	r0, r7
 80041ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <__swbuf_r+0x9c>)
 80041ee:	429c      	cmp	r4, r3
 80041f0:	d101      	bne.n	80041f6 <__swbuf_r+0x7a>
 80041f2:	68ac      	ldr	r4, [r5, #8]
 80041f4:	e7cf      	b.n	8004196 <__swbuf_r+0x1a>
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <__swbuf_r+0xa0>)
 80041f8:	429c      	cmp	r4, r3
 80041fa:	bf08      	it	eq
 80041fc:	68ec      	ldreq	r4, [r5, #12]
 80041fe:	e7ca      	b.n	8004196 <__swbuf_r+0x1a>
 8004200:	4621      	mov	r1, r4
 8004202:	4628      	mov	r0, r5
 8004204:	f000 f81e 	bl	8004244 <__swsetup_r>
 8004208:	2800      	cmp	r0, #0
 800420a:	d0cb      	beq.n	80041a4 <__swbuf_r+0x28>
 800420c:	f04f 37ff 	mov.w	r7, #4294967295
 8004210:	e7ea      	b.n	80041e8 <__swbuf_r+0x6c>
 8004212:	bf00      	nop
 8004214:	08004794 	.word	0x08004794
 8004218:	080047b4 	.word	0x080047b4
 800421c:	08004774 	.word	0x08004774

08004220 <_write_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d07      	ldr	r5, [pc, #28]	; (8004240 <_write_r+0x20>)
 8004224:	4604      	mov	r4, r0
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	2200      	movs	r2, #0
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f7fc fdc3 	bl	8000dba <_write>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_write_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_write_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	2000014c 	.word	0x2000014c

08004244 <__swsetup_r>:
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <__swsetup_r+0xcc>)
 8004246:	b570      	push	{r4, r5, r6, lr}
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	4606      	mov	r6, r0
 800424c:	460c      	mov	r4, r1
 800424e:	b125      	cbz	r5, 800425a <__swsetup_r+0x16>
 8004250:	69ab      	ldr	r3, [r5, #24]
 8004252:	b913      	cbnz	r3, 800425a <__swsetup_r+0x16>
 8004254:	4628      	mov	r0, r5
 8004256:	f7ff fb1b 	bl	8003890 <__sinit>
 800425a:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <__swsetup_r+0xd0>)
 800425c:	429c      	cmp	r4, r3
 800425e:	d10f      	bne.n	8004280 <__swsetup_r+0x3c>
 8004260:	686c      	ldr	r4, [r5, #4]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004268:	0719      	lsls	r1, r3, #28
 800426a:	d42c      	bmi.n	80042c6 <__swsetup_r+0x82>
 800426c:	06dd      	lsls	r5, r3, #27
 800426e:	d411      	bmi.n	8004294 <__swsetup_r+0x50>
 8004270:	2309      	movs	r3, #9
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	f04f 30ff 	mov.w	r0, #4294967295
 800427e:	e03e      	b.n	80042fe <__swsetup_r+0xba>
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <__swsetup_r+0xd4>)
 8004282:	429c      	cmp	r4, r3
 8004284:	d101      	bne.n	800428a <__swsetup_r+0x46>
 8004286:	68ac      	ldr	r4, [r5, #8]
 8004288:	e7eb      	b.n	8004262 <__swsetup_r+0x1e>
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <__swsetup_r+0xd8>)
 800428c:	429c      	cmp	r4, r3
 800428e:	bf08      	it	eq
 8004290:	68ec      	ldreq	r4, [r5, #12]
 8004292:	e7e6      	b.n	8004262 <__swsetup_r+0x1e>
 8004294:	0758      	lsls	r0, r3, #29
 8004296:	d512      	bpl.n	80042be <__swsetup_r+0x7a>
 8004298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800429a:	b141      	cbz	r1, 80042ae <__swsetup_r+0x6a>
 800429c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042a0:	4299      	cmp	r1, r3
 80042a2:	d002      	beq.n	80042aa <__swsetup_r+0x66>
 80042a4:	4630      	mov	r0, r6
 80042a6:	f000 f991 	bl	80045cc <_free_r>
 80042aa:	2300      	movs	r3, #0
 80042ac:	6363      	str	r3, [r4, #52]	; 0x34
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	81a3      	strh	r3, [r4, #12]
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	b94b      	cbnz	r3, 80042de <__swsetup_r+0x9a>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d4:	d003      	beq.n	80042de <__swsetup_r+0x9a>
 80042d6:	4621      	mov	r1, r4
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 f92b 	bl	8004534 <__smakebuf_r>
 80042de:	89a0      	ldrh	r0, [r4, #12]
 80042e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042e4:	f010 0301 	ands.w	r3, r0, #1
 80042e8:	d00a      	beq.n	8004300 <__swsetup_r+0xbc>
 80042ea:	2300      	movs	r3, #0
 80042ec:	60a3      	str	r3, [r4, #8]
 80042ee:	6963      	ldr	r3, [r4, #20]
 80042f0:	425b      	negs	r3, r3
 80042f2:	61a3      	str	r3, [r4, #24]
 80042f4:	6923      	ldr	r3, [r4, #16]
 80042f6:	b943      	cbnz	r3, 800430a <__swsetup_r+0xc6>
 80042f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042fc:	d1ba      	bne.n	8004274 <__swsetup_r+0x30>
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	0781      	lsls	r1, r0, #30
 8004302:	bf58      	it	pl
 8004304:	6963      	ldrpl	r3, [r4, #20]
 8004306:	60a3      	str	r3, [r4, #8]
 8004308:	e7f4      	b.n	80042f4 <__swsetup_r+0xb0>
 800430a:	2000      	movs	r0, #0
 800430c:	e7f7      	b.n	80042fe <__swsetup_r+0xba>
 800430e:	bf00      	nop
 8004310:	20000010 	.word	0x20000010
 8004314:	08004794 	.word	0x08004794
 8004318:	080047b4 	.word	0x080047b4
 800431c:	08004774 	.word	0x08004774

08004320 <_close_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d06      	ldr	r5, [pc, #24]	; (800433c <_close_r+0x1c>)
 8004324:	2300      	movs	r3, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	f7fc fd61 	bl	8000df2 <_close>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_close_r+0x1a>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_close_r+0x1a>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	2000014c 	.word	0x2000014c

08004340 <__sflush_r>:
 8004340:	898a      	ldrh	r2, [r1, #12]
 8004342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004346:	4605      	mov	r5, r0
 8004348:	0710      	lsls	r0, r2, #28
 800434a:	460c      	mov	r4, r1
 800434c:	d458      	bmi.n	8004400 <__sflush_r+0xc0>
 800434e:	684b      	ldr	r3, [r1, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	dc05      	bgt.n	8004360 <__sflush_r+0x20>
 8004354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	dc02      	bgt.n	8004360 <__sflush_r+0x20>
 800435a:	2000      	movs	r0, #0
 800435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004362:	2e00      	cmp	r6, #0
 8004364:	d0f9      	beq.n	800435a <__sflush_r+0x1a>
 8004366:	2300      	movs	r3, #0
 8004368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800436c:	682f      	ldr	r7, [r5, #0]
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	d032      	beq.n	80043d8 <__sflush_r+0x98>
 8004372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	075a      	lsls	r2, r3, #29
 8004378:	d505      	bpl.n	8004386 <__sflush_r+0x46>
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	1ac0      	subs	r0, r0, r3
 800437e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004380:	b10b      	cbz	r3, 8004386 <__sflush_r+0x46>
 8004382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004384:	1ac0      	subs	r0, r0, r3
 8004386:	2300      	movs	r3, #0
 8004388:	4602      	mov	r2, r0
 800438a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800438c:	6a21      	ldr	r1, [r4, #32]
 800438e:	4628      	mov	r0, r5
 8004390:	47b0      	blx	r6
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	d106      	bne.n	80043a6 <__sflush_r+0x66>
 8004398:	6829      	ldr	r1, [r5, #0]
 800439a:	291d      	cmp	r1, #29
 800439c:	d82c      	bhi.n	80043f8 <__sflush_r+0xb8>
 800439e:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <__sflush_r+0x108>)
 80043a0:	40ca      	lsrs	r2, r1
 80043a2:	07d6      	lsls	r6, r2, #31
 80043a4:	d528      	bpl.n	80043f8 <__sflush_r+0xb8>
 80043a6:	2200      	movs	r2, #0
 80043a8:	6062      	str	r2, [r4, #4]
 80043aa:	04d9      	lsls	r1, r3, #19
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	6022      	str	r2, [r4, #0]
 80043b0:	d504      	bpl.n	80043bc <__sflush_r+0x7c>
 80043b2:	1c42      	adds	r2, r0, #1
 80043b4:	d101      	bne.n	80043ba <__sflush_r+0x7a>
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	b903      	cbnz	r3, 80043bc <__sflush_r+0x7c>
 80043ba:	6560      	str	r0, [r4, #84]	; 0x54
 80043bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043be:	602f      	str	r7, [r5, #0]
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d0ca      	beq.n	800435a <__sflush_r+0x1a>
 80043c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c8:	4299      	cmp	r1, r3
 80043ca:	d002      	beq.n	80043d2 <__sflush_r+0x92>
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 f8fd 	bl	80045cc <_free_r>
 80043d2:	2000      	movs	r0, #0
 80043d4:	6360      	str	r0, [r4, #52]	; 0x34
 80043d6:	e7c1      	b.n	800435c <__sflush_r+0x1c>
 80043d8:	6a21      	ldr	r1, [r4, #32]
 80043da:	2301      	movs	r3, #1
 80043dc:	4628      	mov	r0, r5
 80043de:	47b0      	blx	r6
 80043e0:	1c41      	adds	r1, r0, #1
 80043e2:	d1c7      	bne.n	8004374 <__sflush_r+0x34>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0c4      	beq.n	8004374 <__sflush_r+0x34>
 80043ea:	2b1d      	cmp	r3, #29
 80043ec:	d001      	beq.n	80043f2 <__sflush_r+0xb2>
 80043ee:	2b16      	cmp	r3, #22
 80043f0:	d101      	bne.n	80043f6 <__sflush_r+0xb6>
 80043f2:	602f      	str	r7, [r5, #0]
 80043f4:	e7b1      	b.n	800435a <__sflush_r+0x1a>
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	e7ad      	b.n	800435c <__sflush_r+0x1c>
 8004400:	690f      	ldr	r7, [r1, #16]
 8004402:	2f00      	cmp	r7, #0
 8004404:	d0a9      	beq.n	800435a <__sflush_r+0x1a>
 8004406:	0793      	lsls	r3, r2, #30
 8004408:	680e      	ldr	r6, [r1, #0]
 800440a:	bf08      	it	eq
 800440c:	694b      	ldreq	r3, [r1, #20]
 800440e:	600f      	str	r7, [r1, #0]
 8004410:	bf18      	it	ne
 8004412:	2300      	movne	r3, #0
 8004414:	eba6 0807 	sub.w	r8, r6, r7
 8004418:	608b      	str	r3, [r1, #8]
 800441a:	f1b8 0f00 	cmp.w	r8, #0
 800441e:	dd9c      	ble.n	800435a <__sflush_r+0x1a>
 8004420:	6a21      	ldr	r1, [r4, #32]
 8004422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004424:	4643      	mov	r3, r8
 8004426:	463a      	mov	r2, r7
 8004428:	4628      	mov	r0, r5
 800442a:	47b0      	blx	r6
 800442c:	2800      	cmp	r0, #0
 800442e:	dc06      	bgt.n	800443e <__sflush_r+0xfe>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	e78e      	b.n	800435c <__sflush_r+0x1c>
 800443e:	4407      	add	r7, r0
 8004440:	eba8 0800 	sub.w	r8, r8, r0
 8004444:	e7e9      	b.n	800441a <__sflush_r+0xda>
 8004446:	bf00      	nop
 8004448:	20400001 	.word	0x20400001

0800444c <_fflush_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	4605      	mov	r5, r0
 8004452:	460c      	mov	r4, r1
 8004454:	b913      	cbnz	r3, 800445c <_fflush_r+0x10>
 8004456:	2500      	movs	r5, #0
 8004458:	4628      	mov	r0, r5
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	b118      	cbz	r0, 8004466 <_fflush_r+0x1a>
 800445e:	6983      	ldr	r3, [r0, #24]
 8004460:	b90b      	cbnz	r3, 8004466 <_fflush_r+0x1a>
 8004462:	f7ff fa15 	bl	8003890 <__sinit>
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <_fflush_r+0x6c>)
 8004468:	429c      	cmp	r4, r3
 800446a:	d11b      	bne.n	80044a4 <_fflush_r+0x58>
 800446c:	686c      	ldr	r4, [r5, #4]
 800446e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ef      	beq.n	8004456 <_fflush_r+0xa>
 8004476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004478:	07d0      	lsls	r0, r2, #31
 800447a:	d404      	bmi.n	8004486 <_fflush_r+0x3a>
 800447c:	0599      	lsls	r1, r3, #22
 800447e:	d402      	bmi.n	8004486 <_fflush_r+0x3a>
 8004480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004482:	f7ff faa3 	bl	80039cc <__retarget_lock_acquire_recursive>
 8004486:	4628      	mov	r0, r5
 8004488:	4621      	mov	r1, r4
 800448a:	f7ff ff59 	bl	8004340 <__sflush_r>
 800448e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004490:	07da      	lsls	r2, r3, #31
 8004492:	4605      	mov	r5, r0
 8004494:	d4e0      	bmi.n	8004458 <_fflush_r+0xc>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	059b      	lsls	r3, r3, #22
 800449a:	d4dd      	bmi.n	8004458 <_fflush_r+0xc>
 800449c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800449e:	f7ff fa96 	bl	80039ce <__retarget_lock_release_recursive>
 80044a2:	e7d9      	b.n	8004458 <_fflush_r+0xc>
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <_fflush_r+0x70>)
 80044a6:	429c      	cmp	r4, r3
 80044a8:	d101      	bne.n	80044ae <_fflush_r+0x62>
 80044aa:	68ac      	ldr	r4, [r5, #8]
 80044ac:	e7df      	b.n	800446e <_fflush_r+0x22>
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <_fflush_r+0x74>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	bf08      	it	eq
 80044b4:	68ec      	ldreq	r4, [r5, #12]
 80044b6:	e7da      	b.n	800446e <_fflush_r+0x22>
 80044b8:	08004794 	.word	0x08004794
 80044bc:	080047b4 	.word	0x080047b4
 80044c0:	08004774 	.word	0x08004774

080044c4 <_lseek_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4d07      	ldr	r5, [pc, #28]	; (80044e4 <_lseek_r+0x20>)
 80044c8:	4604      	mov	r4, r0
 80044ca:	4608      	mov	r0, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	2200      	movs	r2, #0
 80044d0:	602a      	str	r2, [r5, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f7fc fcb4 	bl	8000e40 <_lseek>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_lseek_r+0x1e>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_lseek_r+0x1e>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	2000014c 	.word	0x2000014c

080044e8 <__swhatbuf_r>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	460e      	mov	r6, r1
 80044ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f0:	2900      	cmp	r1, #0
 80044f2:	b096      	sub	sp, #88	; 0x58
 80044f4:	4614      	mov	r4, r2
 80044f6:	461d      	mov	r5, r3
 80044f8:	da08      	bge.n	800450c <__swhatbuf_r+0x24>
 80044fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	602a      	str	r2, [r5, #0]
 8004502:	061a      	lsls	r2, r3, #24
 8004504:	d410      	bmi.n	8004528 <__swhatbuf_r+0x40>
 8004506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800450a:	e00e      	b.n	800452a <__swhatbuf_r+0x42>
 800450c:	466a      	mov	r2, sp
 800450e:	f000 f8bb 	bl	8004688 <_fstat_r>
 8004512:	2800      	cmp	r0, #0
 8004514:	dbf1      	blt.n	80044fa <__swhatbuf_r+0x12>
 8004516:	9a01      	ldr	r2, [sp, #4]
 8004518:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800451c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004520:	425a      	negs	r2, r3
 8004522:	415a      	adcs	r2, r3
 8004524:	602a      	str	r2, [r5, #0]
 8004526:	e7ee      	b.n	8004506 <__swhatbuf_r+0x1e>
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	2000      	movs	r0, #0
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	b016      	add	sp, #88	; 0x58
 8004530:	bd70      	pop	{r4, r5, r6, pc}
	...

08004534 <__smakebuf_r>:
 8004534:	898b      	ldrh	r3, [r1, #12]
 8004536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004538:	079d      	lsls	r5, r3, #30
 800453a:	4606      	mov	r6, r0
 800453c:	460c      	mov	r4, r1
 800453e:	d507      	bpl.n	8004550 <__smakebuf_r+0x1c>
 8004540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	2301      	movs	r3, #1
 800454a:	6163      	str	r3, [r4, #20]
 800454c:	b002      	add	sp, #8
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	ab01      	add	r3, sp, #4
 8004552:	466a      	mov	r2, sp
 8004554:	f7ff ffc8 	bl	80044e8 <__swhatbuf_r>
 8004558:	9900      	ldr	r1, [sp, #0]
 800455a:	4605      	mov	r5, r0
 800455c:	4630      	mov	r0, r6
 800455e:	f7ff fa57 	bl	8003a10 <_malloc_r>
 8004562:	b948      	cbnz	r0, 8004578 <__smakebuf_r+0x44>
 8004564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004568:	059a      	lsls	r2, r3, #22
 800456a:	d4ef      	bmi.n	800454c <__smakebuf_r+0x18>
 800456c:	f023 0303 	bic.w	r3, r3, #3
 8004570:	f043 0302 	orr.w	r3, r3, #2
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	e7e3      	b.n	8004540 <__smakebuf_r+0xc>
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <__smakebuf_r+0x7c>)
 800457a:	62b3      	str	r3, [r6, #40]	; 0x28
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	6020      	str	r0, [r4, #0]
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	9b00      	ldr	r3, [sp, #0]
 8004588:	6163      	str	r3, [r4, #20]
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	6120      	str	r0, [r4, #16]
 800458e:	b15b      	cbz	r3, 80045a8 <__smakebuf_r+0x74>
 8004590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f889 	bl	80046ac <_isatty_r>
 800459a:	b128      	cbz	r0, 80045a8 <__smakebuf_r+0x74>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	89a0      	ldrh	r0, [r4, #12]
 80045aa:	4305      	orrs	r5, r0
 80045ac:	81a5      	strh	r5, [r4, #12]
 80045ae:	e7cd      	b.n	800454c <__smakebuf_r+0x18>
 80045b0:	08003829 	.word	0x08003829

080045b4 <__malloc_lock>:
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <__malloc_lock+0x8>)
 80045b6:	f7ff ba09 	b.w	80039cc <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	20000140 	.word	0x20000140

080045c0 <__malloc_unlock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <__malloc_unlock+0x8>)
 80045c2:	f7ff ba04 	b.w	80039ce <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	20000140 	.word	0x20000140

080045cc <_free_r>:
 80045cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ce:	2900      	cmp	r1, #0
 80045d0:	d044      	beq.n	800465c <_free_r+0x90>
 80045d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d6:	9001      	str	r0, [sp, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f1a1 0404 	sub.w	r4, r1, #4
 80045de:	bfb8      	it	lt
 80045e0:	18e4      	addlt	r4, r4, r3
 80045e2:	f7ff ffe7 	bl	80045b4 <__malloc_lock>
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <_free_r+0x94>)
 80045e8:	9801      	ldr	r0, [sp, #4]
 80045ea:	6813      	ldr	r3, [r2, #0]
 80045ec:	b933      	cbnz	r3, 80045fc <_free_r+0x30>
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	6014      	str	r4, [r2, #0]
 80045f2:	b003      	add	sp, #12
 80045f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f8:	f7ff bfe2 	b.w	80045c0 <__malloc_unlock>
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d908      	bls.n	8004612 <_free_r+0x46>
 8004600:	6825      	ldr	r5, [r4, #0]
 8004602:	1961      	adds	r1, r4, r5
 8004604:	428b      	cmp	r3, r1
 8004606:	bf01      	itttt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	1949      	addeq	r1, r1, r5
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	e7ed      	b.n	80045ee <_free_r+0x22>
 8004612:	461a      	mov	r2, r3
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b10b      	cbz	r3, 800461c <_free_r+0x50>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d9fa      	bls.n	8004612 <_free_r+0x46>
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	1855      	adds	r5, r2, r1
 8004620:	42a5      	cmp	r5, r4
 8004622:	d10b      	bne.n	800463c <_free_r+0x70>
 8004624:	6824      	ldr	r4, [r4, #0]
 8004626:	4421      	add	r1, r4
 8004628:	1854      	adds	r4, r2, r1
 800462a:	42a3      	cmp	r3, r4
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	d1e0      	bne.n	80045f2 <_free_r+0x26>
 8004630:	681c      	ldr	r4, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	4421      	add	r1, r4
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	e7da      	b.n	80045f2 <_free_r+0x26>
 800463c:	d902      	bls.n	8004644 <_free_r+0x78>
 800463e:	230c      	movs	r3, #12
 8004640:	6003      	str	r3, [r0, #0]
 8004642:	e7d6      	b.n	80045f2 <_free_r+0x26>
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	1961      	adds	r1, r4, r5
 8004648:	428b      	cmp	r3, r1
 800464a:	bf04      	itt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	bf04      	itt	eq
 8004654:	1949      	addeq	r1, r1, r5
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	6054      	str	r4, [r2, #4]
 800465a:	e7ca      	b.n	80045f2 <_free_r+0x26>
 800465c:	b003      	add	sp, #12
 800465e:	bd30      	pop	{r4, r5, pc}
 8004660:	20000144 	.word	0x20000144

08004664 <_read_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	; (8004684 <_read_r+0x20>)
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	2200      	movs	r2, #0
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fc fb84 	bl	8000d80 <_read>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_read_r+0x1e>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_read_r+0x1e>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	2000014c 	.word	0x2000014c

08004688 <_fstat_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4d07      	ldr	r5, [pc, #28]	; (80046a8 <_fstat_r+0x20>)
 800468c:	2300      	movs	r3, #0
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	602b      	str	r3, [r5, #0]
 8004696:	f7fc fbb8 	bl	8000e0a <_fstat>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	d102      	bne.n	80046a4 <_fstat_r+0x1c>
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	b103      	cbz	r3, 80046a4 <_fstat_r+0x1c>
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	bd38      	pop	{r3, r4, r5, pc}
 80046a6:	bf00      	nop
 80046a8:	2000014c 	.word	0x2000014c

080046ac <_isatty_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4d06      	ldr	r5, [pc, #24]	; (80046c8 <_isatty_r+0x1c>)
 80046b0:	2300      	movs	r3, #0
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	f7fc fbb7 	bl	8000e2a <_isatty>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_isatty_r+0x1a>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_isatty_r+0x1a>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	2000014c 	.word	0x2000014c

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
